name: Unity Test Manual (Test)

on:
  workflow_dispatch:
  merge_group: {}

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_LICENSE: ${{ secrets.UNITY_PERSONAL_LICENSE }}
  # Set the exact Unity editor Docker tag you want to use from Docker Hub:
  # Example: 6000.0.49f1 + windows-il2cpp-3
  UNITY_VERSION: 6000.0.49f1
  UNITY_IMAGE_FLAVOR: windows-il2cpp-3

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v4
        with:
          path: Explorer/Library
          key: Library-Explorer-Windows

      - name: Clone Packages To Use Locally
        env:
          REPOS_READ_ONLY_TOKEN: ${{ secrets.REPOS_READ_ONLY_TOKEN }}
        run: |
          git clone https://x-access-token:$env:REPOS_READ_ONLY_TOKEN@github.com/decentraland/unity-explorer-packages.git
          $jsonFilePath = "Explorer/Packages/manifest.json"
          (Get-Content $jsonFilePath) `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/FileBrowserPro', 'file:../../unity-explorer-packages/FileBrowserPro' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/StylizedGrassShader', 'file:../../unity-explorer-packages/StylizedGrassShader' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/RenderGraphs/RenderFeatures', 'file:../../unity-explorer-packages/RenderGraphs/RenderFeatures' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/AVProVideo', 'file:../../unity-explorer-packages/AVProVideo' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/SuperScrollView', 'file:../../unity-explorer-packages/SuperScrollView' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/SoftMask', 'file:../../unity-explorer-packages/SoftMask' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/GPUInstancerPro/com.gurbu.gpui-pro', 'file:../../unity-explorer-packages/GPUInstancerPro/com.gurbu.gpui-pro' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/GPUInstancerPro/com.gurbu.gpui-pro.terrain', 'file:../../unity-explorer-packages/GPUInstancerPro/com.gurbu.gpui-pro.terrain' `
            -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/GPUInstancerPro/com.dcl.gpui-assets', 'file:../../unity-explorer-packages/GPUInstancerPro/com.dcl.gpui-assets' |
            Set-Content $jsonFilePath

          Get-ChildItem
          Get-Content $jsonFilePath

      # --- Pull Unity Editor image directly from Docker Hub (unityci/editor) ---
      - name: Set Docker image tag
        id: tag
        shell: pwsh
        run: |
          $tag = "unityci/editor:windows-$env:UNITY_VERSION-$env:UNITY_IMAGE_FLAVOR"
          echo "image=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Using image tag: $tag"

      - name: Download Unity image from Docker Hub
        shell: pwsh
        run: |
          $img = "${{ steps.tag.outputs.image }}"
          docker pull $img
          $info   = docker image inspect $img | ConvertFrom-Json
          $sizeGB = [math]::Round($info[0].Size/1GB, 2)
          Write-Host "Pulled $img (size ~ $sizeGB GB)"
      # --- end Docker Hub pull ---

      # Configure test runner (explicitly point to the image we just pulled)
      - uses: game-ci/unity-test-runner@v4.3.1
        id: testRunner
        timeout-minutes: 60
        continue-on-error: true
        with:
          projectPath: Explorer
          testMode: all
          customImage: ${{ steps.tag.outputs.image }}

      - name: Convert NUnit to JUnit
        if: always()
        run: |
          New-Item -ItemType Directory -Force -Path "${{ steps.testRunner.outputs.artifactsPath }}-junit"
          choco install xsltproc
          xsltproc `
            --output "${{ steps.testRunner.outputs.artifactsPath }}-junit/playmode-results-junit.xml" `
            .github/workflows/nunit-to-junit.xsl `
            "${{ steps.testRunner.outputs.artifactsPath }}/playmode-results.xml"
          xsltproc `
            --output "${{ steps.testRunner.outputs.artifactsPath }}-junit/editmode-results-junit.xml" `
            .github/workflows/nunit-to-junit.xsl `
            "${{ steps.testRunner.outputs.artifactsPath }}/editmode-results.xml"

      - name: Report test results
        uses: decentraland/test-reporting@v0.3
        if: always()
        with:
          name: Report test results
          path: ${{ steps.testRunner.outputs.artifactsPath }}-junit/*.xml
          reporter: jest-junit

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results (play mode & edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
          if-no-files-found: error
