name: On Delete Latest Release

on:
  release:
    types: 
      - deleted

jobs:
  check-latest-release:
    runs-on: ubuntu-latest
    container:
      image: amazon/aws-cli:latest
    steps:
      - name: Install jq and curl
        run: |
          yum update -y
          yum install -y jq curl

      - name: Check Deleted and Update Latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: check_latest
        run: |
          DELETED_RELEASE_TAG=$(jq -r .release.tag_name "$GITHUB_EVENT_PATH")
          echo "Deleted Release Tag: $DELETED_RELEASE_TAG"

          # Fetch the current latest release from the API
          LATEST_RELEASE=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
          echo "Latest Release Tag: $LATEST_RELEASE"

          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Run actions if release is the latest
        if: steps.check_latest.outputs.latest_release
        env:
          AWS_MAX_ATTEMPTS: 3
          AWS_RETRY_MODE: standard
          AWS_ACCESS_KEY_ID: ${{ secrets.EXPLORER_TEAM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.EXPLORER_TEAM_AWS_SECRET_ACCESS_KEY }}
          EXPLORER_TEAM_S3_BUCKET: ${{ secrets.EXPLORER_TEAM_S3_BUCKET }}
          RELEASES_PATH: ${{ format('@dcl/{0}/releases', github.event.repository.name) }}
          LATEST_RELEASE: ${{ steps.check_latest.outputs.latest_release }}
        run: |
          echo '{
            "version": "$LATEST_RELEASE",
            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
          }' > latest.json
          aws s3 cp latest.json s3://$EXPLORER_TEAM_S3_BUCKET/$RELEASES_PATH/latest.json
