name: Unity Test

on:
  pull_request: {}
  push: { branches: [main] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_PERSONAL_LICENSE }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v3
        with:
          path: Explorer/Library
          key: Library-Explorer-Windows

      # Configure test runner
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        timeout-minutes: 60
        with:
          projectPath: Explorer
          testMode: all

      - name: Convert NUnit to JUnit
        if: always()
        run: |
          mkdir -p ${{ steps.testRunner.outputs.artifactsPath }}-junit
          sudo apt-get update
          sudo apt-get install -y xsltproc
          sudo xsltproc \
            --output ${{ steps.testRunner.outputs.artifactsPath }}-junit/playmode-results-junit.xml \
            .github/workflows/nunit-to-junit.xsl \
            ${{ steps.testRunner.outputs.artifactsPath }}/playmode-results.xml \

          sudo xsltproc \
            --output ${{ steps.testRunner.outputs.artifactsPath }}-junit/editmode-results-junit.xml \
            .github/workflows/nunit-to-junit.xsl \
            ${{ steps.testRunner.outputs.artifactsPath }}/editmode-results.xml

      - name: Report test results
        uses: kuruk-mm/test-reporting@0.2
        if: always()
        with:
          name: Report test results
          path: ${{ steps.testRunner.outputs.artifactsPath }}-junit/*.xml
          reporter: jest-junit

      # Upload artifact
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results (play mode & edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
          if-no-files-found: error