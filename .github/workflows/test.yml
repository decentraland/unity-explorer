name: Unity Test

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'Explorer/**'
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - labeled
  merge_group: {}
  push: { branches: [dev] }

permissions:
  contents: read
  packages: write
  checks: write
  actions: read

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_LICENSE: ${{ secrets.UNITY_PERSONAL_LICENSE }}
  UNITY_IMAGE_FLAVOR: windows-il2cpp
  UNITY_IMAGE_VERSION: 3      
  GHCR_IMAGE_NAME: unityci-editor
  
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event.pull_request.draft == false) || (github.event.label.name == 'force-build') || (github.event.label.name == 'clean-build')
    name: Test
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v4
        with:
          path: Explorer/Library
          key: Library-Explorer-Windows

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Private Repo Access
        run: |
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -t rsa github.com | tee github-key-temp | ssh-keygen -lf -
          cat github-key-temp >> ~/.ssh/known_hosts
          ssh-keyscan -t ed25519 github.com | tee github-key-temp | ssh-keygen -lf -
          cat github-key-temp >> ~/.ssh/known_hosts
          ssh-keyscan -t ecdsa github.com | tee github-key-temp | ssh-keygen -lf -
          cat github-key-temp >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      # --- Detect Unity version from the project ---
      - name: Read Unity version from ProjectVersion.txt
        id: unity-version
        shell: pwsh
        run: |
          $verFile = "Explorer/ProjectSettings/ProjectVersion.txt"
          if (!(Test-Path $verFile)) {
            Write-Error "File not found: $verFile"
            exit 1
          }
          $match = Select-String -Path $verFile -Pattern 'm_EditorVersion:\s*(\S+)' | Select-Object -First 1
          if (-not $match) {
            Write-Error "Could not parse Unity version from $verFile"
            exit 1
          }
          $ver = $match.Matches[0].Groups[1].Value.Trim()
          echo "version=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Detected Unity version: $ver"

      # --- Build image references (GHCR + upstream) ---
      - name: Set image names
        id: img
        shell: pwsh
        run: |
          $version = "${{ steps.unity-version.outputs.version }}"
          $flavor  = "${{ env.UNITY_IMAGE_FLAVOR }}"
          $imgVer  = "${{ env.UNITY_IMAGE_VERSION }}"

          # windows-<unityVersion>-<flavor>-<gameciVersion>
          $tag = "windows-$version-$flavor-$imgVer"
          $owner = "${{ github.repository_owner }}".ToLower()
          $upstream = "unityci/editor:$tag"
          $ghcr     = "ghcr.io/$owner/${{ env.GHCR_IMAGE_NAME }}:$tag"
          echo "tag=$tag"           | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "upstream=$upstream" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "ghcr=$ghcr"         | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Upstream image: $upstream"
          Write-Host "GHCR image:     $ghcr"

      # --- Log into GHCR ---
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # --- Restore Unity image from GHCR (fast path) ---
      - name: Restore Unity image from GHCR
        id: restore-image
        shell: pwsh
        continue-on-error: true
        run: |
          docker pull "${{ steps.img.outputs.ghcr }}"

      # --- Seed GHCR from Docker Hub if missing (one-time per tag) ---
      - name: Download from Docker Hub and upload to GHCR (if missing)
        if: steps.restore-image.outcome == 'failure'
        shell: pwsh
        run: |
          $upstream = "${{ steps.img.outputs.upstream }}"
          $ghcr     = "${{ steps.img.outputs.ghcr }}"
          Write-Host "GHCR miss. Pulling upstream: $upstream"
          docker pull $upstream
          docker tag  $upstream $ghcr
          docker push $ghcr
          Write-Host "Seeded GHCR: $ghcr"

      # Configure test runner
      - uses: game-ci/unity-test-runner@v4.3.1
        id: testRunner
        timeout-minutes: 80
        continue-on-error: true
        with:
          projectPath: Explorer
          testMode: all
          sshAgent: ${{ env.SSH_AUTH_SOCK }}
          customImage: ${{ steps.img.outputs.ghcr }}

      - name: Report test results
        if: always()
        uses: dorny/test-reporter@v2.1.1
        with:
          name: Unity Tests
          path: ${{ steps.testRunner.outputs.artifactsPath }}/*.xml
          reporter: dotnet-nunit
          fail-on-error: true
          fail-on-empty: true
          use-actions-summary: true

      # Upload artifact
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results (play mode & edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
          if-no-files-found: error
