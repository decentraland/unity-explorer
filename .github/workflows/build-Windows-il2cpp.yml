name: Unity Windows Build IL2CPP

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - labeled
  merge_group: {}
  push: { branches: [main] }
  workflow_dispatch:
    inputs:
      profile:
        description: 'Set to true, profiling will be enabled auto-connect profiler will be set to on'
        required: true
        default: 'false'
      deep_profile:
        description: 'Set to true, deep profiling will also be enabled'
        required: false
        default: 'false'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_PERSONAL_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  build:
    strategy:
      max-parallel: 1
      matrix:
        include:
          - targetPlatform: StandaloneWindows64

    name: Build
    runs-on: bigwin2022
    timeout-minutes: 120
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (!github.event.pull_request.draft) || ${{ github.event.label.name == 'force-build' }}
    steps:
      - name: Set SHA env variable
        run: |
          $eventName = "${{ github.event_name }}"
          
          if ($eventName -eq "push") {
              $LONG_SHA = "${{ github.sha }}"
              $SHORT_SHA = ($LONG_SHA).Substring(0, 7)
              Add-Content -Value "CUSTOM_SHA=$SHORT_SHA" -Path $env:GITHUB_ENV
              Write-Output $SHORT_SHA
          }
          elseif ($eventName -eq "pull_request") {
              $LONG_SHA = "${{ github.event.pull_request.head.sha }}"
              $SHORT_SHA = ($LONG_SHA).Substring(0, 7)
              Add-Content -Value "CUSTOM_SHA=$SHORT_SHA" -Path $env:GITHUB_ENV
              Write-Output $SHORT_SHA
          }

      - name: Set sentry env var
        run: |
          $branchName = "${{ github.ref }}"
          $SENTRY_ENVIRONMENT = "branch"
          
          if ($branchName -eq 'refs/heads/main') {
            $SENTRY_ENVIRONMENT = "production"
          } elseif ($branchName -eq 'refs/heads/dev') {
            $SENTRY_ENVIRONMENT = "development"
          }
          
          Add-Content -Value "SENTRY_ENVIRONMENT=$SENTRY_ENVIRONMENT" -Path $env:GITHUB_ENV
          Write-Output $SENTRY_ENVIRONMENT

      - name: Enable or disable the upload of sentry debug symbols
        run: |
          $branchName = "${{ github.ref }}"
          $uploadSymbols = "false"
          if ($branchName -eq 'refs/heads/main') {
            $uploadSymbols = "true"
          }
          Add-Content -Value "SENTRY_UPLOAD_DEBUG_SYMBOLS=$uploadSymbols" -Path $env:GITHUB_ENV
          Write-Output $uploadSymbols

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Create Version
        id: create-version
        run: | 
          $latestTag = git describe --tags
          
          # Extract version components
          if ($latestTag -match '^v(\d+)\.(\d+)-(\d+)-(.+)$') {
          $version = $matches[1]
          $minorVersion = $matches[2]
          $build = $matches[3]
          $commit = $matches[4]
          
          Write-Output "Version: $version"
          Write-Output "Minor Version: $minorVersion"
          Write-Output "Build: $build"
          Write-Output "Commit: $commit"
          } else {
            Write-Output "String does not match expected pattern. No Version Added!"
          }
          
          if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
            $branchName = $env:GITHUB_HEAD_REF
          } else {
            $branchName = ($env:GITHUB_REF -split '/')[2]
          }
          
          $semVer = "v$($version).$($minorVersion).$($build)-$($commit)-$($branchName)"
          Write-Output "Version: $semVer"
          Write-Output "version=$($semVer)" >> $env:GITHUB_OUTPUT
        shell: pwsh
          
      - name: 'Using Version'
        run: |
          Write-Output "Version: ${{ steps.create-version.outputs.version }}"
          Write-Output "Version: ($env:SELECTED_COLOR)"
          
        shell: pwsh
      
      - name: Restore Library cache
        uses: actions/cache@v3
        with:
          path: |
            Explorer/Library
            !Explorer/Library/Bee/**
            !Explorer/Library/BuildPlayerData/**
          key: Library-Explorer-IL2CPP-${{ matrix.targetPlatform }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 'Add GitHub to the SSH known hosts file'
        run: |
          $sshPath = "$env:USERPROFILE\.ssh"
          if (-not (Test-Path -Path $sshPath)) {
            New-Item -Path $sshPath -ItemType Directory
          }
          
          $knownHostsPath = Join-Path $sshPath 'known_hosts'
          
          # Download GitHub public keys and append them to the known_hosts file
          (Invoke-WebRequest -Uri 'https://api.github.com/meta' | ConvertFrom-Json).ssh_keys | ForEach-Object {
            Add-Content -Path $knownHostsPath -Value ("github.com " + $_)
          }
        
          # Set proper permissions on the known_hosts file
          attrib.exe +R +H $knownHostsPath
          
      - name: Manage custom input parameters
        run: |
          $profileEnabled = "${{ github.event.inputs.profile }}"
          $deepProfileEnabled = "${{ github.event.inputs.deep_profile }}"
          
          if ($profileEnabled -eq 'true') {
            $profilingParam = '-profile'
          } else {
            $profilingParam = ''
          }

          if ($deepProfileEnabled -eq 'true') {
            $deepProfilingParam = '-deepProfile'
          } else {
            $deepProfilingParam = ''
          }

          Add-Content -Value "UNITY_CUSTOM_PARAMS=$profilingParam $deepProfilingParam" -Path $env:GITHUB_ENV
          Write-Output "Profiling parameters: $profilingParam $deepProfilingParam"
          
      - name: Clone Packages To Use Locally
        run: |
              # Clone the repository
              git clone git@github.com:decentraland/unity-explorer-packages.git
              
              # Display message
              Write-Host "Editing package manifest"
              
              # Specify the path to the manifest.json file
              $jsonFilePath = "Explorer\Packages\manifest.json"
              
              # Replace the first string in manifest.json
              (Get-Content -Path $jsonFilePath -Raw) -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/StylizedGrassShader', 'file:../../unity-explorer-packages/StylizedGrassShader' | Set-Content -Path $jsonFilePath
              (Get-Content -Path $jsonFilePath -Raw) -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/StylizedWater2', 'file:../../unity-explorer-packages/StylizedWater2' | Set-Content -Path $jsonFilePath
              (Get-Content -Path $jsonFilePath -Raw) -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/AVProVideo', 'file:../../unity-explorer-packages/AVProVideo' | Set-Content -Path $jsonFilePath
              (Get-Content -Path $jsonFilePath -Raw) -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/SuperScrollView', 'file:../../unity-explorer-packages/SuperScrollView' | Set-Content -Path $jsonFilePath
              (Get-Content -Path $jsonFilePath -Raw) -replace 'git@github.com:decentraland/unity-explorer-packages.git\?path=/SoftMask', 'file:../../unity-explorer-packages/SoftMask' | Set-Content -Path $jsonFilePath
          
              # Display the content of manifest.json
              Get-Content -Path $jsonFilePath

              # Display list of files
              ls

      - uses: game-ci/unity-builder@v4.2.3
        id: build
        timeout-minutes: 120
        with:
          buildMethod: Editor.BuildScript.Build
          projectPath: Explorer
          buildTimeout: 120
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: Decentraland
          versioning: Custom
          version: ${{ steps.create-version.outputs.version }}
          customParameters: -sentryDsn ${{ secrets.SENTRY_DSN }} -sentryEnvironment ${{ env.SENTRY_ENVIRONMENT }} -sentryCliAuthToken ${{ secrets.SENTRY_CLI_AUTH_TOKEN }} -sentryUploadDebugSymbols ${{ env.SENTRY_UPLOAD_DEBUG_SYMBOLS }} ${{ env.UNITY_CUSTOM_PARAMS }}
          sshAgent: ${{ env.SSH_AUTH_SOCK }}
          allowDirtyBuild: true

      # Upload artifact
      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: Decentraland
          path: |
            build
            !build/**/*_BackUpThisFolder_ButDontShipItWithYourGame
            !build/**/*_BurstDebugInformation_DoNotShip
          if-no-files-found: error
          
      # Upload build report
      - name: Uploading build report (test)
        uses: actions/upload-artifact@v4
        with:
          name: Build Report
          path: |
            Explorer/Library/LastBuild.buildreport
          if-no-files-found: error
