// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)

// Generic compute skinning ... with pos, norm, and tangent skinning
// for readability, deleted multi compile codes from original

#pragma kernel main

#include "HLSLSupport.cginc"

uint g_VertCount;
uint _lastAvatarVertCount;

struct BoneWeight
{
    float weight0,weight1,weight2,weight3;
    int index0,index1,index2,index3;
};

struct VertexInfo
{
    float3 position;
    float3 normal;
    float4 tangent;
};

#define NR_THREADS  64

[numthreads(NR_THREADS, 1, 1)]
void main(uint3 threadID : SV_DispatchThreadID,
    SAMPLER_UNIFORM StructuredBuffer<float3> g_VertsIn, SAMPLER_UNIFORM StructuredBuffer<float3> g_NormalsIn, SAMPLER_UNIFORM StructuredBuffer<float4> g_TangentsIn, SAMPLER_UNIFORM StructuredBuffer<BoneWeight> g_SourceSkin, 
    SAMPLER_UNIFORM RWStructuredBuffer<VertexInfo> _GlobalAvatarBuffer, 
    SAMPLER_UNIFORM StructuredBuffer<float4x4> g_mBones, SAMPLER_UNIFORM StructuredBuffer<float4x4> g_BindPoses, SAMPLER_UNIFORM StructuredBuffer<int> g_BindPosesIndex)
{
    const uint t = threadID.x;

    if (t >= g_VertCount)
    {
        return;
    }
    
    // get bone weight info
    BoneWeight si = g_SourceSkin[t];
    const int baseIndex = g_BindPosesIndex[t];


    //TODO ComputeShaderOptimization. Tne bind pose matrix could be calculated once using jobs outside the compute shader
    float3 vP = g_VertsIn[t].xyz;
    float3 vPacc = float3(0,0,0);
    vPacc += si.weight0 * mul(g_mBones[si.index0], mul(g_BindPoses[baseIndex+si.index0], float4(vP, 1))).xyz;
    vPacc += si.weight1 * mul(g_mBones[si.index1], mul(g_BindPoses[baseIndex+si.index1], float4(vP, 1))).xyz;
    vPacc += si.weight2 * mul(g_mBones[si.index2], mul(g_BindPoses[baseIndex+si.index2], float4(vP, 1))).xyz;
    vPacc += si.weight3 * mul(g_mBones[si.index3], mul(g_BindPoses[baseIndex+si.index3], float4(vP, 1))).xyz;
    vP = vPacc;
    _GlobalAvatarBuffer[_lastAvatarVertCount + t].position.xyz = vP;

    
    float3 vN = float3(0,0,0);
    vN = g_NormalsIn[t].xyz;
    float3 vNacc = float3(0,0,0);
    vNacc += si.weight0*mul(  g_mBones[si.index0], mul(g_BindPoses[baseIndex+si.index0], float4(vN, 0))).xyz;
    vNacc += si.weight1*mul(  g_mBones[si.index1], mul(g_BindPoses[baseIndex+si.index1], float4(vN, 0))).xyz;
    vNacc += si.weight2*mul(  g_mBones[si.index2], mul(g_BindPoses[baseIndex+si.index2], float4(vN, 0))).xyz;
    vNacc += si.weight3*mul(  g_mBones[si.index3], mul(g_BindPoses[baseIndex+si.index3], float4(vN, 0))).xyz;
    vN = vNacc;
    _GlobalAvatarBuffer[_lastAvatarVertCount + t].normal.xyz = vN;

    
    float3 vT = float3(0,0,0);
    vT = g_TangentsIn[t].xyz;
    float3 vTacc = float3(0,0,0);
    
    vTacc += si.weight0*mul((float3x3)g_mBones[si.index0], mul((float3x3)g_BindPoses[baseIndex+si.index0], vT)).xyz;
    vTacc += si.weight1*mul((float3x3)g_mBones[si.index1], mul((float3x3)g_BindPoses[baseIndex+si.index1], vT)).xyz;
    vTacc += si.weight2*mul((float3x3)g_mBones[si.index2], mul((float3x3)g_BindPoses[baseIndex+si.index2], vT)).xyz;
    vTacc += si.weight3*mul((float3x3)g_mBones[si.index3], mul((float3x3)g_BindPoses[baseIndex+si.index3], vT)).xyz;

    vT = vTacc;
    _GlobalAvatarBuffer[_lastAvatarVertCount + t].tangent.xyzw = float4(vT.xyz,g_TangentsIn[t].w);
}