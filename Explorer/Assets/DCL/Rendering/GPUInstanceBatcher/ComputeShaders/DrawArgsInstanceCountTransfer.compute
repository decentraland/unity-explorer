#include "Includes/PlatformSpecifications.cginc"
#include "Includes/Structures.cginc"

// Uncomment for debug symbols - do not commit uncommented
//#pragma enable_d3d11_debug_symbols
#pragma kernel DrawArgsInstanceCountTransfer

////////////////////
// UNIFORM INPUTS
////////////////////
shared RWStructuredBuffer<uint> arrLODCount;
StructuredBuffer<GroupData> GroupDataBuffer;
uniform uint nSubMeshCount; // TODO: would be better if this wasn't a uniform for minor perf benefit

////////////////////
// UNIFORM OUTPUTS
////////////////////
shared RWStructuredBuffer<uint> IndirectDrawIndexedArgsBuffer; // 5x UINT, per draw args

[numthreads(1, 1, 1)]
void DrawArgsInstanceCountTransfer(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= GroupDataBuffer[0].nInstBufferSize)
        return;

    const uint nSizeOfDrawArgs = 5;
    const uint nInstanceCountOffsetInArgsBuffer = 1;
    const uint nLODCount = GroupDataBuffer[0].nLODCount;
    
    for (uint nSubmesh = 0; nSubmesh < nSubMeshCount; ++nSubmesh)
    {
        for (uint nLOD = 0; nLOD < nLODCount; ++nLOD)
        {
            IndirectDrawIndexedArgsBuffer[(nSubmesh * nSizeOfDrawArgs * nLODCount) + (nLOD * nSizeOfDrawArgs) + nInstanceCountOffsetInArgsBuffer] = arrLODCount[nLOD];
        }
    }

    for (uint nLOD = 0; nLOD < 8; ++nLOD)
        arrLODCount[nLOD] = 0;
}