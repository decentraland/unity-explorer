#include "Includes/PlatformSpecifications.cginc"

#pragma kernel ComputeLODBufferAccumulation

////////////////////
// UNIFORM INPUTS
////////////////////
uniform uint nInstBufferSize;
uniform uint nLODCount;
uniform uint arrLODCount[8];
RWStructuredBuffer<uint4> PerInstance_LODLevels; // LOD_A, LOD_B, LOD_Dither, LOD_Shadow

////////////////////
// UNIFORM OUTPUTS
////////////////////
RWStructuredBuffer<uint> IndirectDrawIndexedArgsBuffer; // 5x UINT, per draw args
RWStructuredBuffer<uint2> InstanceLookUpAndDither;

[numthreads(GPUI_THREADS, 1, 1)]
void ComputeLODBufferAccumulation(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= nInstBufferSize)
        return;

    uint original_out;
    uint nLOD_A = PerInstance_LODLevels[id.x][0];
    uint nLOD_B = PerInstance_LODLevels[id.x][1];
    uint nLOD_Shadow = PerInstance_LODLevels[id.x][3];
    if (nLOD_A < nLODCount)
    {
        if (nLOD_A == 0)
        {
            InterlockedAdd(arrLODCount[0], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 0)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(0*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[1], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 1)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(1*5) + 2], 1);
            }
        }
        else if (nLOD_A == 1)
        {
            InterlockedAdd(arrLODCount[1], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 1)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(1*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[2], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 2)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(2*5) + 2], 1);
            }
        }
        else if (nLOD_A == 2)
        {
            InterlockedAdd(arrLODCount[2], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 2)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(2*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[3], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 3)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(3*5) + 2], 1);
            }
        }
        else if (nLOD_A == 3)
        {
            InterlockedAdd(arrLODCount[3], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 3)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(3*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[4], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 4)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(4*5) + 2], 1);
            }
        }
        else if (nLOD_A == 4)
        {
            InterlockedAdd(arrLODCount[4], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 4)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(4*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[5], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 5)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(5*5) + 2], 1);
            }
        }
        else if (nLOD_A == 5)
        {
            InterlockedAdd(arrLODCount[5], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 5)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(5*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[6], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 6)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(6*5) + 2], 1);
            }
        }
        else if (nLOD_A == 6)
        {
            InterlockedAdd(arrLODCount[6], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 6)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(6*5) + 2], 1);
            if (nLOD_B < nLODCount)
            {
                InterlockedAdd(arrLODCount[7], 1, original_out);
                InstanceLookUpAndDither[original_out + (nLODCount * 7)] = uint2(id.x, PerInstance_LODLevels[id.x][3]);
                InterlockedAdd(IndirectDrawIndexedArgsBuffer[(7*5) + 2], 1);
            }
        }
        else if (nLOD_A == 7)
        {
            InterlockedAdd(arrLODCount[7], 1, original_out);
            InstanceLookUpAndDither[original_out + (nLODCount * 7)] = uint2(id.x, 255 - PerInstance_LODLevels[id.x][3]);
            InterlockedAdd(IndirectDrawIndexedArgsBuffer[(7*5) + 2], 1);
        }
    }
}