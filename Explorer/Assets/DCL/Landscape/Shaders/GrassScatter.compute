//#pragma enable_d3d11_debug_symbols

#include "ScatterFunctions.cginc"

#pragma kernel ScatterGrass

struct PerInst
{
    float4 position;
    float4 quatRotation;
    float4 colour;
};

cbuffer ConstBuffer : register(b0)
{
    float4 TerrainBounds;
    int2 HeightTextureSize;
    int2 OccupancyTextureSize;
    int2 TerrainBlendTextureSize;
    int2 GroundDetailTextureSize;
    int2 SandDetailTextureSize;
    float TerrainHeight;
    int parcelSize;
    float fDistanceFieldScale;
    float nHeightMapSize;
    float fSplatMapTiling;
    float _MinDistOccupancy;
}

Texture2D<float4> HeightMapTexture : register(t0);
Texture2D<float4> OccupancyTexture : register(t1);
Texture2D<float4> TerrainBlendTexture : register(t2);
Texture2D<float4> GroundDetailTexture : register(t3);
Texture2D<float4> SandDetailTexture : register(t4);
StructuredBuffer<int2> visibleParcels : register(t5);
StructuredBuffer<uint> visibleParcelCount : register(t6);

RWStructuredBuffer<PerInst> grassInstances : register(u0);
shared RWStructuredBuffer<uint> drawArgs : register(u1);

[numthreads(256, 1, 1)]
void ScatterGrass(uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint3 localId : SV_GroupThreadID)
{
    if (groupId.x >= visibleParcelCount[0])
        return;

    PerInst perInst;

    int2 corner0 = (int2)(visibleParcels[groupId.x] * parcelSize);
    int2 gridPosition = int2((int)(localId.x % parcelSize), (int)(localId.x / parcelSize));

    half random_X = hash_int_to_float(corner0 + gridPosition) + gridPosition.x;
    half random_Z = hash_int_to_float(-corner0 + gridPosition) + gridPosition.y;
    float2 worldSpaceCoord = corner0 + float2(random_X, random_Z);
    float2 UV_coords = (worldSpaceCoord + (nHeightMapSize/2.0f)) / nHeightMapSize;
    
    float height = CalculateHeightFromHeightmap(UV_coords, fDistanceFieldScale, nHeightMapSize, parcelSize, OccupancyTextureSize.x, HeightMapTexture, OccupancyTexture, _MinDistOccupancy);
    float fScale = 1.0f + hash_int_to_float(corner0 + gridPosition);
    perInst.position = float4(random_X, height, random_Z, fScale);
    
    float3 normalWS = CalculateNormalFromHeightmap(UV_coords, fDistanceFieldScale,  HeightMapTexture, OccupancyTexture, _MinDistOccupancy);
    perInst.quatRotation = CreateGrassRotationQuaternion(normalWS, hash_int_to_float(corner0 + gridPosition) * 2.0f);
    perInst.colour = SplatmapMix(UV_coords * fSplatMapTiling, TerrainBlendTexture, GroundDetailTexture, SandDetailTexture);
    grassInstances[id.x] = perInst;

    InterlockedAdd(drawArgs[1], 1);
}
