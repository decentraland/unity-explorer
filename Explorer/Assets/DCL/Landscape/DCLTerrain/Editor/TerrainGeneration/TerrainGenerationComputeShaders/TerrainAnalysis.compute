// Analyzes terrain heightmap to find optimal compression parameters
#pragma kernel AnalyzeTerrain

// ============================================================================
// BUFFERS AND TEXTURES
// ============================================================================

// Input terrain texture (single channel height data)
Texture2D<float4> SourceTerrain;

// Analysis results buffer - each workgroup writes: min, max, sum, sumSquared
RWStructuredBuffer<float4> AnalysisBuffer;

// Analysis parameters
uint2 TextureSize;

// ============================================================================
// SHARED MEMORY FOR REDUCTION
// ============================================================================

groupshared float sharedMin[64];
groupshared float sharedMax[64];
groupshared float sharedSum[64];
groupshared float sharedSumSq[64];

// ============================================================================
// TERRAIN ANALYSIS KERNEL
// ============================================================================

[numthreads(8, 8, 1)]
void AnalyzeTerrain(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    // Initialize shared memory with neutral values
    sharedMin[groupIndex] = 1.0;
    sharedMax[groupIndex] = 0.0;
    sharedSum[groupIndex] = 0.0;
    sharedSumSq[groupIndex] = 0.0;

    // Sample terrain if within bounds
    if (all(id.xy < TextureSize))
    {
        float height = SourceTerrain[id.xy].r; // Height is in red channel

        sharedMin[groupIndex] = height;
        sharedMax[groupIndex] = height;
        sharedSum[groupIndex] = height;
        sharedSumSq[groupIndex] = height * height;
    }

    GroupMemoryBarrierWithGroupSync();

    // Parallel reduction within workgroup (64 threads = 8x8)
    [unroll]
    for (uint stride = 32; stride > 0; stride >>= 1)
    {
        if (groupIndex < stride)
        {
            sharedMin[groupIndex] = min(sharedMin[groupIndex], sharedMin[groupIndex + stride]);
            sharedMax[groupIndex] = max(sharedMax[groupIndex], sharedMax[groupIndex + stride]);
            sharedSum[groupIndex] += sharedSum[groupIndex + stride];
            sharedSumSq[groupIndex] += sharedSumSq[groupIndex + stride];
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // Thread 0 writes workgroup results
    if (groupIndex == 0)
    {
        uint3 groupID = id / 8; // 8x8 workgroup size
        uint bufferIndex = groupID.y * ((TextureSize.x + 7) / 8) + groupID.x;

        // Store: min, max, sum, sumSquared
        AnalysisBuffer[bufferIndex] = float4(
            sharedMin[0],
            sharedMax[0],
            sharedSum[0],
            sharedSumSq[0]
        );
    }
}
