#pragma kernel ReduceResults

// ============================================================================
// BUFFERS AND TEXTURES
// ============================================================================

// Analysis results buffer - each workgroup writes: min, max, sum, sumSquared
StructuredBuffer<float4> AnalysisBuffer;

// Final reduced results - single entry with global stats
RWStructuredBuffer<float4> GlobalStats; // x=min, y=max, z=average, w=variance

// Analysis parameters
uint2 TextureSize;
uint NumWorkgroups;

// ============================================================================
// SHARED MEMORY FOR REDUCTION
// ============================================================================

groupshared float sharedMin[64];
groupshared float sharedMax[64];
groupshared float sharedSum[64];
groupshared float sharedSumSq[64];

// ============================================================================
// SIMPLE REDUCTION KERNEL
// ============================================================================

[numthreads(64, 1, 1)]
void ReduceResults(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    // Initialize shared memory with neutral values
    sharedMin[groupIndex] = 1e10;  // Very large number
    sharedMax[groupIndex] = -1e10; // Very small number
    sharedSum[groupIndex] = 0.0;
    sharedSumSq[groupIndex] = 0.0;

    // Calculate how many workgroups we need to process
    uint totalWorkgroups = ((TextureSize.x + 7) / 8) * ((TextureSize.y + 7) / 8);

    // Each thread in this group processes multiple workgroups if needed
    uint workgroupsPerThread = (totalWorkgroups + 63) / 64; // Round up division

    // Process workgroups assigned to this thread
    for (uint i = 0; i < workgroupsPerThread; i++)
    {
        uint workgroupIndex = groupIndex + i * 64;

        if (workgroupIndex < totalWorkgroups)
        {
            float4 data = AnalysisBuffer[workgroupIndex];

            // Update this thread's accumulated values
            sharedMin[groupIndex] = min(sharedMin[groupIndex], data.x);
            sharedMax[groupIndex] = max(sharedMax[groupIndex], data.y);
            sharedSum[groupIndex] += data.z;
            sharedSumSq[groupIndex] += data.w;
        }
    }

    // Synchronize before reduction
    GroupMemoryBarrierWithGroupSync();

    // Parallel reduction within the group
    [unroll]
    for (uint stride = 32; stride > 0; stride >>= 1)
    {
        if (groupIndex < stride)
        {
            sharedMin[groupIndex] = min(sharedMin[groupIndex], sharedMin[groupIndex + stride]);
            sharedMax[groupIndex] = max(sharedMax[groupIndex], sharedMax[groupIndex + stride]);
            sharedSum[groupIndex] += sharedSum[groupIndex + stride];
            sharedSumSq[groupIndex] += sharedSumSq[groupIndex + stride];
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // Thread 0 writes the final result
    if (groupIndex == 0)
    {
        float globalMin = sharedMin[0];
        float globalMax = sharedMax[0];
        float globalSum = sharedSum[0];
        float globalSumSq = sharedSumSq[0];

        // Calculate global statistics
        uint totalPixels = TextureSize.x * TextureSize.y;
        float globalAverage = globalSum / totalPixels;
        float globalVariance = (globalSumSq / totalPixels) - (globalAverage * globalAverage);

        // Store final results
        GlobalStats[0] = float4(globalMin, globalMax, globalAverage, globalVariance);
    }
}
