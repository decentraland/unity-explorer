#pragma kernel CompressToBC4

// BC4 compression compute shader for single-channel height data
// BC4 stores a single channel using alpha interpolation with 8 alpha values

Texture2D<float4> g_SourceTexture;
RWStructuredBuffer<uint2> g_CompressedData;

int g_srcWidth;
int g_srcHeight;
int g_blocksX;
int g_blocksY;
int g_blockOffset;

uint PackBC4Block(float values[16])
{
    // Find min and max values in the 4x4 block
    float minVal = values[0];
    float maxVal = values[0];

    for (int i = 1; i < 16; i++)
    {
        minVal = min(minVal, values[i]);
        maxVal = max(maxVal, values[i]);
    }

    // Convert to 8-bit range
    uint alpha0 = (uint)(minVal * 255.0f + 0.5f);
    uint alpha1 = (uint)(maxVal * 255.0f + 0.5f);

    // Ensure alpha0 > alpha1 for 8-alpha mode (better quality)
    if (alpha0 < alpha1)
    {
        uint temp = alpha0;
        alpha0 = alpha1;
        alpha1 = temp;
    }

    // Calculate interpolated alpha values
    float alphaValues[8];
    alphaValues[0] = alpha0 / 255.0f;
    alphaValues[1] = alpha1 / 255.0f;

    if (alpha0 > alpha1)
    {
        // 8-alpha mode: 6 interpolated values
        for (int i = 1; i <= 6; i++)
        {
            alphaValues[i + 1] = (alphaValues[0] * (7 - i) + alphaValues[1] * i) / 7.0f;
        }
    }
    else
    {
        // 6-alpha mode: 4 interpolated values + 0 and 1
        for (int i = 1; i <= 4; i++)
        {
            alphaValues[i + 1] = (alphaValues[0] * (5 - i) + alphaValues[1] * i) / 5.0f;
        }
        alphaValues[6] = 0.0f;
        alphaValues[7] = 1.0f;
    }

    // Find best alpha index for each pixel
    uint indices = 0;
    for (int pixelIdx = 0; pixelIdx < 16; pixelIdx++)
    {
        float pixelValue = values[pixelIdx];

        // Find closest alpha value
        int bestIndex = 0;
        float bestDistance = abs(pixelValue - alphaValues[0]);

        for (int alphaIdx = 1; alphaIdx < 8; alphaIdx++)
        {
            float distance = abs(pixelValue - alphaValues[alphaIdx]);
            if (distance < bestDistance)
            {
                bestDistance = distance;
                bestIndex = alphaIdx;
            }
        }

        // Pack 3-bit index (BC4 uses 3 bits per pixel for 8 alpha values)
        indices |= (bestIndex << (pixelIdx * 3));
    }

    return indices;
}

[numthreads(1, 1, 1)]
void CompressToBC4(uint3 id : SV_DispatchThreadID)
{
    int blockX = id.x;
    int blockY = id.y;

    if (blockX >= g_blocksX || blockY >= g_blocksY)
        return;

    // Calculate source texture coordinates for this block
    int srcX = blockX * 4;
    int srcY = blockY * 4;

    // Sample 4x4 block of height values
    float heightValues[16];

    for (int y = 0; y < 4; y++)
    {
        for (int x = 0; x < 4; x++)
        {
            int sampleX = min(srcX + x, g_srcWidth - 1);
            int sampleY = min(srcY + y, g_srcHeight - 1);

            // Sample height from red channel
            float4 texel = g_SourceTexture[int2(sampleX, sampleY)];
            heightValues[y * 4 + x] = texel.r;
        }
    }

    // Find min and max for alpha endpoints
    float minHeight = heightValues[0];
    float maxHeight = heightValues[0];

    for (int i = 1; i < 16; i++)
    {
        minHeight = min(minHeight, heightValues[i]);
        maxHeight = max(maxHeight, heightValues[i]);
    }

    // Convert to 8-bit alpha values
    uint alpha0 = (uint)(maxHeight * 255.0f + 0.5f); // Max first for 8-alpha mode
    uint alpha1 = (uint)(minHeight * 255.0f + 0.5f);

    // Calculate the 8 interpolated alpha values
    float lerpValues[8];
    lerpValues[0] = alpha0 / 255.0f;
    lerpValues[1] = alpha1 / 255.0f;

    // 8-alpha mode interpolation
    lerpValues[2] = (6.0f * lerpValues[0] + 1.0f * lerpValues[1]) / 7.0f;
    lerpValues[3] = (5.0f * lerpValues[0] + 2.0f * lerpValues[1]) / 7.0f;
    lerpValues[4] = (4.0f * lerpValues[0] + 3.0f * lerpValues[1]) / 7.0f;
    lerpValues[5] = (3.0f * lerpValues[0] + 4.0f * lerpValues[1]) / 7.0f;
    lerpValues[6] = (2.0f * lerpValues[0] + 5.0f * lerpValues[1]) / 7.0f;
    lerpValues[7] = (1.0f * lerpValues[0] + 6.0f * lerpValues[1]) / 7.0f;

    // Build alpha indices (3 bits per pixel, 16 pixels = 48 bits total)
    uint alphaIndices0 = 0; // First 32 bits
    uint alphaIndices1 = 0; // Remaining 16 bits

    for (int pixelIdx = 0; pixelIdx < 16; pixelIdx++)
    {
        float height = heightValues[pixelIdx];

        // Find best matching alpha value
        int bestIndex = 0;
        float bestError = abs(height - lerpValues[0]);

        for (int alphaIdx = 1; alphaIdx < 8; alphaIdx++)
        {
            float error = abs(height - lerpValues[alphaIdx]);
            if (error < bestError)
            {
                bestError = error;
                bestIndex = alphaIdx;
            }
        }

        // Pack the 3-bit index
        if (pixelIdx < 10) // First 10 pixels fit in first uint (10 * 3 = 30 bits)
        {
            alphaIndices0 |= (bestIndex << (pixelIdx * 3));
        }
        else // Remaining 6 pixels go in second uint
        {
            alphaIndices1 |= (bestIndex << ((pixelIdx - 10) * 3));
        }
    }

    // Pack BC4 block: alpha0, alpha1, then 48 bits of indices
    // BC4 block structure:
    // uint0: alpha0 (8 bits) | alpha1 (8 bits) | alphaIndices0_low (16 bits)
    // uint1: alphaIndices0_high (16 bits) | alphaIndices1 (16 bits)

    uint block0 = alpha0 | (alpha1 << 8) | ((alphaIndices0 & 0xFFFF) << 16);
    uint block1 = ((alphaIndices0 >> 16) & 0xFFFF) | ((alphaIndices1 & 0xFFFF) << 16);

    // Write to output buffer
    int outputIndex = g_blockOffset + blockY * g_blocksX + blockX;
    g_CompressedData[outputIndex] = uint2(block0, block1);
}
