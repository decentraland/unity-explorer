#pragma kernel OptimizeForBC4

// ============================================================================
// BUFFERS AND TEXTURES
// ============================================================================

// Input terrain texture (single channel height data)
Texture2D<float> SourceTerrain;

// Analysis parameters
uint2 TextureSize;
float OptimizationStrength; // 0.0 = simple normalize, 1.0 = full optimization

// Final reduced results - single entry with global stats
StructuredBuffer<float4> GlobalStats; // x=min, y=max, z=average, w=variance

// Optimized terrain output (normalized for BC4)
RWTexture2D<float4> OptimizedTerrain;

// ============================================================================
// BC4 OPTIMIZATION KERNEL
// ============================================================================

[numthreads(8, 8, 1)]
void OptimizeForBC4(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xy >= TextureSize))
        return;

    float originalHeight = SourceTerrain[id.xy].r;

    // Get global statistics
    float4 stats = GlobalStats[0];
    float globalMin = stats.x;
    float globalMax = stats.y;
    float globalAverage = stats.z;
    float globalVariance = stats.w;

    float optimizedHeight = originalHeight;

    if (OptimizationStrength <= 0.1)
    {
        // Simple min-max normalization (preserves original distribution)
        float range = globalMax - globalMin;
        if (range > 0.0001f) // Avoid division by zero
        {
            optimizedHeight = (originalHeight - globalMin) / range;
        }
        else
        {
            optimizedHeight = 0.0f; // Flat terrain fallback
        }
    }
    else
    {
        // Advanced optimization for BC4 compression
        float range = globalMax - globalMin;

        if (range > 0.0001)
        {
            // Step 1: Basic normalization
            float normalized = (originalHeight - globalMin) / range;
            normalized = saturate(normalized); // Ensure [0,1] range for safety

            // Step 2: Histogram equalization to better utilize BC4's precision
            // Apply a curve that redistributes values for better block compression
            float deviation = abs(normalized - 0.5) * 2.0; // Distance from center [0,1]
            float curve = lerp(1.0, 0.7, OptimizationStrength); // Compression curve strength
            float exponent = curve + (1.0 - curve) * deviation;

            // Safe power function - ensure base is positive and exponent is reasonable
            float redistributed = pow(max(normalized, 0.001), max(exponent, 0.1));

            // Step 3: Block-aware optimization (BC4 uses 4x4 blocks)
            if (OptimizationStrength > 0.5)
            {
                // Sample neighborhood for local variance
                float2 texelSize = 1.0 / float2(TextureSize);
                float localSum = 0;
                int samples = 0;

                // 3x3 kernel for local analysis
                for (int x = -1; x <= 1; x++)
                {
                    for (int y = -1; y <= 1; y++)
                    {
                        int2 sampleCoord = int2(id.xy) + int2(x, y);
                        if (all(sampleCoord >= 0) && all(sampleCoord < int2(TextureSize)))
                        {
                            localSum += SourceTerrain[sampleCoord].r;
                            samples++;
                        }
                    }
                }

                float localAverage = localSum / max(samples, 1); // Avoid division by zero
                float localNormalized = (localAverage - globalMin) / range;
                localNormalized = saturate(localNormalized); // Ensure valid range

                // Blend global and local optimization based on local variance
                float localVariance = abs(localNormalized - normalized);
                float blendFactor = saturate(localVariance * 4.0) * OptimizationStrength;

                optimizedHeight = lerp(redistributed, localNormalized, blendFactor * 0.3);
            }
            else
            {
                optimizedHeight = redistributed;
            }

            // Step 4: Quantization to reduce noise (helps BC4 compression)
            if (OptimizationStrength > 0.3)
            {
                float quantizationLevels = lerp(256.0, 128.0, OptimizationStrength);
                optimizedHeight = round(optimizedHeight * quantizationLevels) / quantizationLevels;
            }
        }
        else
        {
            optimizedHeight = 0.5; // Flat terrain fallback
        }
    }

    // Ensure output is in valid range 0-1
    optimizedHeight = saturate(optimizedHeight);

    // Store optimized height (BC4 will use red channel only)
    OptimizedTerrain[id.xy] = float4(optimizedHeight, 0.0, 0.0, 1.0);
}
