#pragma kernel CompressToBC1

// BC1 compression kernel
// BC1 compression parameters
cbuffer BC1Params : register(b0)
{
    uint g_srcWidth;
    uint g_srcHeight;
    uint g_blocksX;
    uint g_blocksY;
    uint g_blockOffset; // Starting block for this dispatch pass
}

Texture2D<float4> g_SourceTexture : register(t0);
RWStructuredBuffer<uint2> g_CompressedData : register(u0);
groupshared float3 g_blockData[16];

// ============================================================================
// BC1 COMPRESSION FUNCTIONS
// ============================================================================

// Convert float color to 565 format
uint PackColor565(float3 color)
{
    uint r = (uint)(saturate(color.r) * 31.0 + 0.5);
    uint g = (uint)(saturate(color.g) * 63.0 + 0.5);
    uint b = (uint)(saturate(color.b) * 31.0 + 0.5);
    return (r << 11) | (g << 5) | b;
}

// Unpack 565 color to float3
float3 UnpackColor565(uint color565)
{
    float r = ((color565 >> 11) & 0x1F) / 31.0;
    float g = ((color565 >> 5) & 0x3F) / 63.0;
    float b = (color565 & 0x1F) / 31.0;
    return float3(r, g, b);
}

// Simple BC1 compression - finds best endpoints via brute force
uint2 CompressBC1Block(float3 block[16])
{
    // Find min/max colors as starting endpoints
    float3 minColor = block[0];
    float3 maxColor = block[0];
    for(int i = 1; i < 16; i++)
    {
        minColor = min(minColor, block[i]);
        maxColor = max(maxColor, block[i]);
    }

    uint color0_565 = PackColor565(maxColor);
    uint color1_565 = PackColor565(minColor);

    // Ensure color0 > color1 for 4-color mode (no alpha)
    if(color0_565 <= color1_565)
    {
        uint temp = color0_565;
        color0_565 = color1_565;
        color1_565 = temp;
    }

    // Generate color palette
    float3 palette[4];
    palette[0] = UnpackColor565(color0_565);
    palette[1] = UnpackColor565(color1_565);
    palette[2] = (2.0 * palette[0] + palette[1]) / 3.0;
    palette[3] = (palette[0] + 2.0 * palette[1]) / 3.0;

    // Find best indices for each pixel
    uint indices = 0;
    for(int i = 0; i < 16; i++)
    {
        float bestDistance = 999999.0;
        uint bestIndex = 0;
        for(uint j = 0; j < 4; j++)
        {
            float3 diff = block[i] - palette[j];
            float distance = dot(diff, diff);
            if(distance < bestDistance)
            {
                bestDistance = distance;
                bestIndex = j;
            }
        }
        indices |= (bestIndex << (i * 2));
    }

    return uint2((color1_565 << 16) | color0_565, indices);
}

// BC1 compression kernel - Using 4x4 threads to match block structure
[numthreads(4, 4, 1)]
void CompressToBC1(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{
    uint blockId = g_blockOffset + groupID.x + groupID.y * g_blocksX;

    // Early exit for out-of-bounds blocks
    bool validBlock = (blockId < g_blocksX * g_blocksY);

    uint blockY = 0;
    uint blockX = 0;
    uint baseX = 0;
    uint baseY = 0;

    if (validBlock)
    {
        blockY = blockId / g_blocksX;
        blockX = blockId % g_blocksX;
        baseX = blockX * 4;
        baseY = blockY * 4;
    }

    // Each thread handles one pixel in the 4x4 block
    uint pixelX = baseX + groupThreadID.x;
    uint pixelY = baseY + groupThreadID.y;

    if (validBlock && pixelX < g_srcWidth && pixelY < g_srcHeight)
    {
        float4 pixel = g_SourceTexture.Load(uint3(pixelX, pixelY, 0));
        g_blockData[groupIndex] = pixel.rgb;
    }
    else
    {
        g_blockData[groupIndex] = float3(0, 0, 0);
    }

    // Synchronize all threads in the group (all 16 pixels of the block)
    GroupMemoryBarrierWithGroupSync();

    // Compress block (only the first thread in each group)
    if(groupIndex == 0 && validBlock)
    {
        g_CompressedData[blockId] = CompressBC1Block(g_blockData);
    }
}
