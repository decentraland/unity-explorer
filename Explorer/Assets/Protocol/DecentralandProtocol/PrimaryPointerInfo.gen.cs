// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: decentraland/sdk/components/primary_pointer_info.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DCL.ECSComponents {

  /// <summary>Holder for reflection information generated from decentraland/sdk/components/primary_pointer_info.proto</summary>
  public static partial class PrimaryPointerInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for decentraland/sdk/components/primary_pointer_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PrimaryPointerInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZkZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvcHJpbWFyeV9wb2ludGVy",
            "X2luZm8ucHJvdG8SG2RlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50cxohZGVj",
            "ZW50cmFsYW5kL2NvbW1vbi92ZWN0b3JzLnByb3RvIuQCChRQQlByaW1hcnlQ",
            "b2ludGVySW5mbxJDCgxwb2ludGVyX3R5cGUYASABKA4yKC5kZWNlbnRyYWxh",
            "bmQuc2RrLmNvbXBvbmVudHMuUG9pbnRlclR5cGVIAIgBARI9ChJzY3JlZW5f",
            "Y29vcmRpbmF0ZXMYAiABKAsyHC5kZWNlbnRyYWxhbmQuY29tbW9uLlZlY3Rv",
            "cjJIAYgBARI3CgxzY3JlZW5fZGVsdGEYAyABKAsyHC5kZWNlbnRyYWxhbmQu",
            "Y29tbW9uLlZlY3RvcjJIAogBARI+ChN3b3JsZF9yYXlfZGlyZWN0aW9uGAQg",
            "ASgLMhwuZGVjZW50cmFsYW5kLmNvbW1vbi5WZWN0b3IzSAOIAQFCDwoNX3Bv",
            "aW50ZXJfdHlwZUIVChNfc2NyZWVuX2Nvb3JkaW5hdGVzQg8KDV9zY3JlZW5f",
            "ZGVsdGFCFgoUX3dvcmxkX3JheV9kaXJlY3Rpb24qKgoLUG9pbnRlclR5cGUS",
            "DAoIUE9UX05PTkUQABINCglQT1RfTU9VU0UQAUIUqgIRRENMLkVDU0NvbXBv",
            "bmVudHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Decentraland.Common.VectorsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DCL.ECSComponents.PointerType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBPrimaryPointerInfo), global::DCL.ECSComponents.PBPrimaryPointerInfo.Parser, new[]{ "PointerType", "ScreenCoordinates", "ScreenDelta", "WorldRayDirection" }, new[]{ "PointerType", "ScreenCoordinates", "ScreenDelta", "WorldRayDirection" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// PointerType enumerates the different input devices that can be used for pointer interactions.
  /// Each type has specific characteristics and use cases in the virtual world.
  /// </summary>
  public enum PointerType {
    /// <summary>
    /// No pointer input
    /// </summary>
    [pbr::OriginalName("POT_NONE")] PotNone = 0,
    /// <summary>
    /// Traditional mouse input
    /// </summary>
    [pbr::OriginalName("POT_MOUSE")] PotMouse = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The PBPrimaryPointerInfo component provides information about the current state of the primary
  /// pointer input device (mouse, touch, gamepad, or VR controller). It tracks the pointer's position,
  /// movement, and interaction capabilities in both 2D screen space and 3D world space.
  ///
  /// This component is essential for:
  /// - Tracking cursor/pointer position and movement
  /// - Converting 2D screen coordinates to 3D world space interactions
  /// - Supporting multiple input methods (mouse, touch, gamepad, VR)
  /// - Enabling ray-based interactions for 3D object selection
  ///
  /// The component can be used to:
  /// - Implement drag-and-drop functionality
  /// - Handle touch interactions on mobile devices
  /// - Support gamepad navigation
  /// - Enable VR controller interactions
  /// - Convert screen coordinates to world space rays for 3D interactions
  ///
  /// Note: Touch, Pad and Wand support will be added later
  /// </summary>
  public sealed partial class PBPrimaryPointerInfo : pb::IMessage<PBPrimaryPointerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PBPrimaryPointerInfo> _parser = new pb::MessageParser<PBPrimaryPointerInfo>(() => new PBPrimaryPointerInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PBPrimaryPointerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DCL.ECSComponents.PrimaryPointerInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBPrimaryPointerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBPrimaryPointerInfo(PBPrimaryPointerInfo other) : this() {
      _hasBits0 = other._hasBits0;
      pointerType_ = other.pointerType_;
      screenCoordinates_ = other.screenCoordinates_ != null ? other.screenCoordinates_.Clone() : null;
      screenDelta_ = other.screenDelta_ != null ? other.screenDelta_.Clone() : null;
      worldRayDirection_ = other.worldRayDirection_ != null ? other.worldRayDirection_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBPrimaryPointerInfo Clone() {
      return new PBPrimaryPointerInfo(this);
    }

    /// <summary>Field number for the "pointer_type" field.</summary>
    public const int PointerTypeFieldNumber = 1;
    private global::DCL.ECSComponents.PointerType pointerType_;
    /// <summary>
    /// The type of input device being used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PointerType PointerType {
      get { if ((_hasBits0 & 1) != 0) { return pointerType_; } else { return global::DCL.ECSComponents.PointerType.PotNone; } }
      set {
        _hasBits0 |= 1;
        pointerType_ = value;
      }
    }
    /// <summary>Gets whether the "pointer_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPointerType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pointer_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPointerType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "screen_coordinates" field.</summary>
    public const int ScreenCoordinatesFieldNumber = 2;
    private global::Decentraland.Common.Vector2 screenCoordinates_;
    /// <summary>
    /// Current position in screen space (pixels)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Decentraland.Common.Vector2 ScreenCoordinates {
      get { return screenCoordinates_; }
      set {
        screenCoordinates_ = value;
      }
    }

    /// <summary>Field number for the "screen_delta" field.</summary>
    public const int ScreenDeltaFieldNumber = 3;
    private global::Decentraland.Common.Vector2 screenDelta_;
    /// <summary>
    /// Movement since last frame (pixels)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Decentraland.Common.Vector2 ScreenDelta {
      get { return screenDelta_; }
      set {
        screenDelta_ = value;
      }
    }

    /// <summary>Field number for the "world_ray_direction" field.</summary>
    public const int WorldRayDirectionFieldNumber = 4;
    private global::Decentraland.Common.Vector3 worldRayDirection_;
    /// <summary>
    /// Direction vector for 3D ray casting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Decentraland.Common.Vector3 WorldRayDirection {
      get { return worldRayDirection_; }
      set {
        worldRayDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PBPrimaryPointerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PBPrimaryPointerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointerType != other.PointerType) return false;
      if (!object.Equals(ScreenCoordinates, other.ScreenCoordinates)) return false;
      if (!object.Equals(ScreenDelta, other.ScreenDelta)) return false;
      if (!object.Equals(WorldRayDirection, other.WorldRayDirection)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPointerType) hash ^= PointerType.GetHashCode();
      if (screenCoordinates_ != null) hash ^= ScreenCoordinates.GetHashCode();
      if (screenDelta_ != null) hash ^= ScreenDelta.GetHashCode();
      if (worldRayDirection_ != null) hash ^= WorldRayDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPointerType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PointerType);
      }
      if (screenCoordinates_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ScreenCoordinates);
      }
      if (screenDelta_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScreenDelta);
      }
      if (worldRayDirection_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WorldRayDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPointerType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PointerType);
      }
      if (screenCoordinates_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ScreenCoordinates);
      }
      if (screenDelta_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScreenDelta);
      }
      if (worldRayDirection_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WorldRayDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPointerType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PointerType);
      }
      if (screenCoordinates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScreenCoordinates);
      }
      if (screenDelta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScreenDelta);
      }
      if (worldRayDirection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldRayDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PBPrimaryPointerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasPointerType) {
        PointerType = other.PointerType;
      }
      if (other.screenCoordinates_ != null) {
        if (screenCoordinates_ == null) {
          ScreenCoordinates = new global::Decentraland.Common.Vector2();
        }
        ScreenCoordinates.MergeFrom(other.ScreenCoordinates);
      }
      if (other.screenDelta_ != null) {
        if (screenDelta_ == null) {
          ScreenDelta = new global::Decentraland.Common.Vector2();
        }
        ScreenDelta.MergeFrom(other.ScreenDelta);
      }
      if (other.worldRayDirection_ != null) {
        if (worldRayDirection_ == null) {
          WorldRayDirection = new global::Decentraland.Common.Vector3();
        }
        WorldRayDirection.MergeFrom(other.WorldRayDirection);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PointerType = (global::DCL.ECSComponents.PointerType) input.ReadEnum();
            break;
          }
          case 18: {
            if (screenCoordinates_ == null) {
              ScreenCoordinates = new global::Decentraland.Common.Vector2();
            }
            input.ReadMessage(ScreenCoordinates);
            break;
          }
          case 26: {
            if (screenDelta_ == null) {
              ScreenDelta = new global::Decentraland.Common.Vector2();
            }
            input.ReadMessage(ScreenDelta);
            break;
          }
          case 34: {
            if (worldRayDirection_ == null) {
              WorldRayDirection = new global::Decentraland.Common.Vector3();
            }
            input.ReadMessage(WorldRayDirection);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PointerType = (global::DCL.ECSComponents.PointerType) input.ReadEnum();
            break;
          }
          case 18: {
            if (screenCoordinates_ == null) {
              ScreenCoordinates = new global::Decentraland.Common.Vector2();
            }
            input.ReadMessage(ScreenCoordinates);
            break;
          }
          case 26: {
            if (screenDelta_ == null) {
              ScreenDelta = new global::Decentraland.Common.Vector2();
            }
            input.ReadMessage(ScreenDelta);
            break;
          }
          case 34: {
            if (worldRayDirection_ == null) {
              WorldRayDirection = new global::Decentraland.Common.Vector3();
            }
            input.ReadMessage(WorldRayDirection);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
