<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arch</name>
    </assembly>
    <members>
        <member name="T:Arch.CommandBuffer.CreateCommand">
            <summary>
                The <see cref="T:Arch.CommandBuffer.CreateCommand"/> struct
                contains data for creating a new <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.CreateCommand.#ctor(System.Int32,Arch.Core.Utils.ComponentType[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.CreateCommand"/> struct.
            </summary>
            <param name="index">The <see cref="T:Arch.Core.Entity"/>'s buffer id.</param>
            <param name="types">Its <see cref="T:Arch.Core.Utils.ComponentType"/>'s array.</param>
        </member>
        <member name="T:Arch.CommandBuffer.BufferedEntityInfo">
            <summary>
                The <see cref="T:Arch.CommandBuffer.BufferedEntityInfo"/> struct
                contains data about a buffered <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <remarks>
                This struct's purpose is to speed up lookups into an <see cref="T:Arch.Core.Entity"/>'s internal data.
            </remarks>
        </member>
        <member name="M:Arch.CommandBuffer.BufferedEntityInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                 Initializes a new instance of the <see cref="T:Arch.CommandBuffer.CreateCommand"/> struct.
            </summary>
            <param name="index">Its <see cref="T:Arch.CommandBuffer.CommandBuffer"/> index.</param>
            <param name="setIndex">Its <see cref="P:Arch.CommandBuffer.CommandBuffer.Sets"/> index.</param>
            <param name="addIndex">Its <see cref="P:Arch.CommandBuffer.CommandBuffer.Adds"/> index.</param>
            <param name="removeIndex">Its <see cref="P:Arch.CommandBuffer.CommandBuffer.Removes"/> index.</param>
        </member>
        <member name="T:Arch.CommandBuffer.CommandBuffer">
            <summary>
                The <see cref="T:Arch.CommandBuffer.CommandBuffer"/> class
                stores operation to <see cref="T:Arch.Core.Entity"/>'s between to play and implement them at a later time in the <see cref="P:Arch.CommandBuffer.CommandBuffer.World"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.#ctor(Arch.Core.World,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.CommandBuffer"/> class
                with the specified <see cref="T:Arch.Core.World"/> and an optional <paramref name="initialCapacity"/> (default: 128).
            </summary>
            <param name="world">The <see cref="P:Arch.CommandBuffer.CommandBuffer.World"/>.</param>
            <param name="initialCapacity">The <see cref="!:initialCapacity"/>.</param>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.World">
            <summary>
                Gets the <see cref="T:Arch.Core.World"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Size">
            <summary>
                Gets the amount of <see cref="T:Arch.Core.Entity"/> instances targeted by this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Entities">
            <summary>
                All <see cref="T:Arch.Core.Entity"/>'s created or modified in this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.BufferedEntityInfo">
            <summary>
                A map that stores some additional information for each <see cref="T:Arch.Core.Entity"/>, which is needed for the internal <see cref="T:Arch.CommandBuffer.CommandBuffer"/> operations.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Creates">
            <summary>
                All create commands recorded in this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>. Used to create <see cref="T:Arch.Core.Entity"/>'s during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Sets">
            <summary>
                Saves set operations for components to play them back later during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Adds">
            <summary>
                Saves add operations for components to play them back later during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Removes">
            <summary>
                Saves remove operations for components to play them back later during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.CommandBuffer.Destroys">
            <summary>
                Saves remove operations for <see cref="T:Arch.Core.Entity"/>'s to play them back later during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Register(Arch.Core.Entity@,Arch.CommandBuffer.BufferedEntityInfo@)">
            <summary>
                Registers a new <see cref="T:Arch.Core.Entity"/> into the <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
                An <see langword="out"/> parameter contains its <see cref="T:Arch.CommandBuffer.BufferedEntityInfo"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> to register.</param>
            <param name="info">Its <see cref="P:Arch.CommandBuffer.CommandBuffer.BufferedEntityInfo"/> which stores indexes used for <see cref="T:Arch.CommandBuffer.CommandBuffer"/> operations.</param>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Resolve(Arch.Core.Entity)">
            TODO : Probably just run this if the wrapped entity is negative? To save some overhead? 
            <summary>
                Resolves an <see cref="T:Arch.Core.Entity"/> originally either from a <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> or <see cref="T:Arch.CommandBuffer.SparseArray"/> to its real <see cref="T:Arch.Core.Entity"/>.
                This is required since we can also create new entities via this buffer and buffer operations for it. So sometimes there negative entities stored in the arrays and those must then be resolved to its newly created real entity. 
                <remarks>Probably hard to understand, blame genaray for this.</remarks>
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> with a negative or positive id to resolve.</param>
            <returns>Its real <see cref="T:Arch.Core.Entity"/>.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Create(Arch.Core.Utils.ComponentType[])">
            <summary>
                Records a Create operation for an <see cref="T:Arch.Core.Entity"/> based on its component structure.
                Will be created during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
            <param name="types">The <see cref="T:Arch.Core.Entity"/>'s component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>The buffered <see cref="T:Arch.Core.Entity"/> with an index of <c>-1</c>.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Destroy(Arch.Core.Entity@)">
            <summary>
                Record a Destroy operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Will be destroyed during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> to destroy.</param>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Set``1(Arch.Core.Entity@,``0@)">
            <summary>
                Records a set operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Overwrites previous values.
                Will be set during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="component">The component value.</param>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Add``1(Arch.Core.Entity@,``0@)">
            <summary>
                Records a add operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Overwrites previous values.
                Will be added during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="component">The component value.</param>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Remove``1(Arch.Core.Entity@)">
            <summary>
                Records a remove operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Will be removed during <see cref="M:Arch.CommandBuffer.CommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Playback">
            <summary>
                Plays back all recorded commands, modifying the world.
            </summary>
            <remarks>
                This operation should only happen on the main thread.
            </remarks>
        </member>
        <member name="M:Arch.CommandBuffer.CommandBuffer.Dispose">
            <summary>
                Disposes the <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="T:Arch.CommandBuffer.PersistentCommandBuffer">
            <summary>
                Right the same as <see cref="T:Arch.CommandBuffer.CommandBuffer"/> but does use Pooled Collections under the hood.
                It's meant to be reused multiple times when the Shared Pooling Behaviour is undesirable.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.#ctor(Arch.Core.World,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.CommandBuffer"/> class
                with the specified <see cref="T:Arch.Core.World"/> and an optional <paramref name="initialCapacity"/> (default: 128).
            </summary>
            <param name="world">The <see cref="P:Arch.CommandBuffer.PersistentCommandBuffer.World"/>.</param>
            <param name="initialCapacity">The <see cref="!:initialCapacity"/>.</param>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.World">
            <summary>
                Gets the <see cref="T:Arch.Core.World"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Size">
            <summary>
                Gets the amount of <see cref="T:Arch.Core.Entity"/> instances targeted by this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Entities">
            <summary>
                All <see cref="T:Arch.Core.Entity"/>'s created or modified in this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.BufferedEntityInfo">
            <summary>
                A map that stores some additional information for each <see cref="T:Arch.Core.Entity"/>, which is needed for the internal <see cref="T:Arch.CommandBuffer.CommandBuffer"/> operations.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Creates">
            <summary>
                All create commands recorded in this <see cref="T:Arch.CommandBuffer.CommandBuffer"/>. Used to create <see cref="T:Arch.Core.Entity"/>'s during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Sets">
            <summary>
                Saves set operations for components to play them back later during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Adds">
            <summary>
                Saves add operations for components to play them back later during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Removes">
            <summary>
                Saves remove operations for components to play them back later during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.PersistentCommandBuffer.Destroys">
            <summary>
                Saves remove operations for <see cref="T:Arch.Core.Entity"/>'s to play them back later during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Register(Arch.Core.Entity@,Arch.CommandBuffer.BufferedEntityInfo@)">
            <summary>
                Registers a new <see cref="T:Arch.Core.Entity"/> into the <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
                An <see langword="out"/> parameter contains its <see cref="T:Arch.CommandBuffer.BufferedEntityInfo"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> to register.</param>
            <param name="info">Its <see cref="P:Arch.CommandBuffer.PersistentCommandBuffer.BufferedEntityInfo"/> which stores indexes used for <see cref="T:Arch.CommandBuffer.CommandBuffer"/> operations.</param>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Create(Arch.Core.Utils.ComponentType[])">
            <summary>
                Records a Create operation for an <see cref="T:Arch.Core.Entity"/> based on its component structure.
                Will be created during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
            <param name="types">The <see cref="T:Arch.Core.Entity"/>'s component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>The buffered <see cref="T:Arch.Core.Entity"/> with an index of <c>-1</c>.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Destroy(Arch.Core.Entity@)">
            <summary>
                Record a Destroy operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Will be destroyed during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> to destroy.</param>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Set``1(Arch.Core.Entity@,``0@)">
            <summary>
                Records a set operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Overwrites previous values.
                Will be set during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="component">The component value.</param>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Add``1(Arch.Core.Entity@,``0@)">
            <summary>
                Records a add operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Overwrites previous values.
                Will be added during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="component">The component value.</param>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Remove``1(Arch.Core.Entity@)">
            <summary>
                Records a remove operation for an (buffered) <see cref="T:Arch.Core.Entity"/>.
                Will be removed during <see cref="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Playback">
            <summary>
                Plays back all recorded commands, modifying the world.
            </summary>
            <remarks>
                This operation should only happen on the main thread.
            </remarks>
        </member>
        <member name="M:Arch.CommandBuffer.PersistentCommandBuffer.Dispose">
            <summary>
                Disposes the <see cref="T:Arch.CommandBuffer.CommandBuffer"/>.
            </summary>
        </member>
        <member name="T:Arch.CommandBuffer.SparseEntity">
            <summary>
                The <see cref="T:Arch.CommandBuffer.SparseEntity"/> struct
               represents an <see cref="F:Arch.CommandBuffer.SparseEntity.Entity"/> with its index in the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.SparseEntity.#ctor(Arch.Core.Entity,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.SparseEntity"/> struct.
            </summary>
            <param name="entity">The <see cref="F:Arch.CommandBuffer.SparseEntity.Entity"/></param>
            <param name="index">The index inside the <see cref="T:Arch.CommandBuffer.SparseSet"/>.</param>
        </member>
        <member name="T:Arch.CommandBuffer.SparseArray">
            <summary>
                The see <see cref="T:Arch.CommandBuffer.SparseArray"/> class
                stores components of a certain type in a sparse array.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.#ctor(Arch.Core.Utils.ComponentType,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.SparseArray"/> class
                with the specified <see cref="T:Arch.Core.Utils.ComponentType"/> and an optional initial <paramref name="capacity"/> (default: 64).
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:Arch.CommandBuffer.SparseArray.Type">
            <summary>
                Gets the <see cref="T:Arch.Core.Utils.ComponentType"/> the <see cref="T:Arch.CommandBuffer.SparseArray"/> stores.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseArray.Capacity">
            <summary>
                Gets the total number of elements the <see cref="T:Arch.CommandBuffer.SparseArray"/> can hold without resizing.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseArray.Size">
            <summary>
                Gets the total number of elements in the <see cref="T:Arch.CommandBuffer.SparseArray"/>.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.SparseArray.Entities">
            <summary>
                Gets or sets the indices of the stored <see cref="T:Arch.Core.Entity"/> instances.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseArray.Components">
            <summary>
                Gets an array of components contained by the <see cref="T:Arch.CommandBuffer.SparseArray"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.Add(System.Int32)">
            <summary>
                Adds an item to the array.
            </summary>
            <param name="index">Its index in the array.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.Contains(System.Int32)">
            <summary>
                Checks if an component exists at the index.
            </summary>
            <param name="index">The index in the array.</param>
            <returns>True if an component exists there, otherwhise false.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.GetArray``1">
            <summary>
                Return an array of the given type.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The array instance if it exists.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.Set``1(System.Int32,``0@)">
            <summary>
                Sets a component at the index.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index.</param>
            <param name="component">The component instance.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.Get``1(System.Int32)">
            <summary>
                Returns a reference to the component at the index.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseArray.Clear">
            <summary>
                Clears this <see cref="T:Arch.CommandBuffer.SparseArray"/> instance and sets its <see cref="P:Arch.CommandBuffer.SparseArray.Size"/> to 0.
            </summary>
        </member>
        <member name="T:Arch.CommandBuffer.SparseSet">
            <summary>
                The <see cref="T:Arch.CommandBuffer.SparseSet"/> class
                Stores a series of <see cref="T:Arch.CommandBuffer.SparseArray"/>'s and their associated components.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.SparseSet"/> class
                with an optional initial <paramref name="capacity"/> (default: 64).
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:Arch.CommandBuffer.SparseSet.Capacity">
            <summary>
                Gets the total number of elements the <see cref="T:Arch.CommandBuffer.SparseSet"/> initially can hold.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseSet.Count">
            <summary>
                Gets the total number of elements in the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseSet.Entities">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:Arch.CommandBuffer.SparseEntity"/> instances in the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.SparseSet.UsedSize">
            <summary>
                Gets the total number of <see cref="T:Arch.CommandBuffer.SparseArray"/> instances in the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.SparseSet.Used">
            <summary>
                Gets or sets an array containing used <see cref="T:Arch.CommandBuffer.SparseArray"/> indices.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.SparseSet.Components">
            <summary>
                Gets or sets an array containing <see cref="T:Arch.CommandBuffer.SparseArray"/> instances.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.EnsureTypeCapacity(System.Int32)">
            <summary>
                Ensures the capacity for registered components types.
                Resizes the existing <see cref="F:Arch.CommandBuffer.SparseSet.Components"/> array properly to fit the id in.
                <remarks>Does not ensure the capacity in terms of how many operations or components are recorded.</remarks>
            </summary>
            <param name="capacity">The new capacity, the id of the component which will be ensured to fit into the arrays.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.EnsureUsedCapacity(System.Int32)">
            <summary>
                Ensures the capacity for the <see cref="F:Arch.CommandBuffer.SparseSet.Used"/> array.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.Create(Arch.Core.Entity@)">
            <summary>
                Adds an <see cref="T:Arch.Core.Entity"/> to the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>The index in the <see cref="T:Arch.CommandBuffer.SparseSet"/>.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.AddSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Adds an <see cref="T:Arch.CommandBuffer.SparseArray"/> to the <see cref="F:Arch.CommandBuffer.SparseSet.Components"/> list and updates the <see cref="F:Arch.CommandBuffer.SparseSet.Used"/> properly.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/> of the <see cref="T:Arch.CommandBuffer.SparseArray"/>.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.HasSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Checks whether a <see cref="T:Arch.CommandBuffer.SparseArray"/> for a certain <see cref="T:Arch.Core.Utils.ComponentType"/> exists in the <see cref="F:Arch.CommandBuffer.SparseSet.Components"/>.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/> to check.</param>
            <returns>True if it does, false if not.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.GetSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Returns the existing <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> for the registered <see cref="T:Arch.Core.Utils.ComponentType"/>.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>The existing <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> instance.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.Set``1(System.Int32,``0@)">
            <summary>
                Sets a component at the index.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index.</param>
            <param name="component">The component instance.</param>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.Contains``1(System.Int32)">
            <summary>
                Checks if an component exists at the index.
            </summary>
            <param name="index">The index in the array.</param>
            <returns>True if an component exists there, otherwhise false.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.Get``1(System.Int32)">
            <summary>
                Returns a reference to the component at the index.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.SparseSet.Clear">
            <summary>
                Clears the <see cref="T:Arch.CommandBuffer.SparseSet"/>.
            </summary>
        </member>
        <member name="T:Arch.CommandBuffer.StructuralEntity">
            <summary>
                The <see cref="T:Arch.CommandBuffer.StructuralEntity"/> struct
                represents an <see cref="F:Arch.CommandBuffer.StructuralEntity.Entity"/> with its index in the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralEntity.#ctor(Arch.Core.Entity,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.StructuralEntity"/> struct.
            </summary>
            <param name="entity">The <see cref="F:Arch.CommandBuffer.StructuralEntity.Entity"/>.</param>
            <param name="index">Its index in its <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.</param>
        </member>
        <member name="T:Arch.CommandBuffer.StructuralSparseArray">
            <summary>
                The see <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> class
                 stores components of a certain type in a sparse array.
                It does not store its values however, its more like a registration mechanism.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseArray.#ctor(Arch.Core.Utils.ComponentType,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> class
                with the specified <see cref="T:Arch.Core.Utils.ComponentType"/> and an optional initial <paramref name="capacity"/> (default: 64).
            </summary>
            <param name="type">Its <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <param name="capacity">Its initial capacity.</param>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseArray.Type">
            <summary>
                Gets the <see cref="T:Arch.Core.Utils.ComponentType"/> the <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> stores.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseArray.Size">
            <summary>
                Gets the total number of elements in the <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/>.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.StructuralSparseArray.Entities">
            <summary>
                Gets or sets the indices of the stored <see cref="T:Arch.Core.Entity"/> instances.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseArray.Add(System.Int32)">
            <summary>
                Adds an item to the array.
            </summary>
            <param name="index">Its index in the array.</param>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseArray.Contains(System.Int32)">
            <summary>
                Checks if an component exists at the index.
            </summary>
            <param name="index">The index in the array.</param>
            <returns>True if an component exists there, otherwhise false.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseArray.Clear">
            <summary>
                Clears this <see cref="T:Arch.CommandBuffer.SparseArray"/> instance and sets its <see cref="P:Arch.CommandBuffer.StructuralSparseArray.Size"/> to 0.
            </summary>
        </member>
        <member name="T:Arch.CommandBuffer.StructuralSparseSet">
            <summary>
                The <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/> class
                stores a series of <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/>'s and their associated components.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/> class
                with an optional initial <paramref name="capacity"/> (default: 64).
            </summary>
            <param name="capacity">Its initial capacity.</param>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseSet.Capacity">
            <summary>
                Gets the total number of elements the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/> initially can hold.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseSet.Count">
            <summary>
                Gets the total number of elements in the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseSet.Entities">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:Arch.CommandBuffer.StructuralEntity"/> instances in the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
        </member>
        <member name="P:Arch.CommandBuffer.StructuralSparseSet.UsedSize">
            <summary>
                Gets the total number of <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> instances in the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.StructuralSparseSet.Used">
            <summary>
                Gets or sets an array containing used <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> indices.
            </summary>
        </member>
        <member name="F:Arch.CommandBuffer.StructuralSparseSet.Components">
            <summary>
                Gets or sets an array containing <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> instances.
            </summary>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.EnsureTypeCapacity(System.Int32)">
            <summary>
                Ensures the capacity for registered components types.
                Resizes the existing <see cref="F:Arch.CommandBuffer.StructuralSparseSet.Components"/> array properly to fit the id in.
                <remarks>Does not ensure the capacity in terms of how many operations or components are recorded.</remarks>
            </summary>
            <param name="capacity">The new capacity, the id of the component which will be ensured to fit into the arrays.</param>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.EnsureUsedCapacity(System.Int32)">
            <summary>
                Ensures the capacity for the <see cref="F:Arch.CommandBuffer.StructuralSparseSet.Used"/> array.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.AddStructuralSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Adds an <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> to the <see cref="F:Arch.CommandBuffer.StructuralSparseSet.Components"/> list and updates the <see cref="F:Arch.CommandBuffer.StructuralSparseSet.Used"/> properly.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/> of the <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/>.</param>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.HasStructuralSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Checks whether a <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> for a certain <see cref="T:Arch.Core.Utils.ComponentType"/> exists in the <see cref="F:Arch.CommandBuffer.StructuralSparseSet.Components"/>.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/> to check.</param>
            <returns>True if it does, false if not.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.GetStructuralSparseArray(Arch.Core.Utils.ComponentType)">
            <summary>
                Returns the existing <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> for the registered <see cref="T:Arch.Core.Utils.ComponentType"/>.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>The existing <see cref="T:Arch.CommandBuffer.StructuralSparseArray"/> instance.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.Create(Arch.Core.Entity@)">
            <summary>
                Adds an <see cref="T:Arch.Core.Entity"/> to the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>Its index in this <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.Set``1(System.Int32)">
            <summary>
                Sets a component at the index.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index.</param>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.Contains``1(System.Int32)">
            <summary>
                Checks if an component exists at the index.
            </summary>
            <param name="index">The index in the array.</param>
            <returns>True if an component exists there, otherwhise false.</returns>
        </member>
        <member name="M:Arch.CommandBuffer.StructuralSparseSet.Clear">
            <summary>
                Clears the <see cref="T:Arch.CommandBuffer.StructuralSparseSet"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.Slot">
            <summary>
                The <see cref="T:Arch.Core.Slot"/> struct references an <see cref="T:Arch.Core.Entity"/> entry within an <see cref="T:Arch.Core.Archetype"/> using a reference to its <see cref="T:Arch.Core.Chunk"/> and its index.
            </summary>
        </member>
        <member name="F:Arch.Core.Slot.Index">
            <summary>
                The index of the <see cref="T:Arch.Core.Entity"/> in the <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.Slot.ChunkIndex">
            <summary>
                The index of the <see cref="T:Arch.Core.Chunk"/> in which the <see cref="T:Arch.Core.Entity"/> is located.
            </summary>
        </member>
        <member name="M:Arch.Core.Slot.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Slot"/> struct.
            </summary>
            <param name="index">The index of the <see cref="T:Arch.Core.Entity"/> in the <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="chunkIndex">The index of the <see cref="T:Arch.Core.Chunk"/> in which the <see cref="T:Arch.Core.Entity"/> is located.</param>
        </member>
        <member name="M:Arch.Core.Slot.op_Addition(Arch.Core.Slot,Arch.Core.Slot)">
            <summary>
                Adds a plus operator for easy calculation of new <see cref="T:Arch.Core.Slot"/>. Adds the positions of both <see cref="T:Arch.Core.Slot"/>s.
            </summary>
            <param name="first">The first <see cref="T:Arch.Core.Slot"/>.</param>
            <param name="second">The second <see cref="T:Arch.Core.Slot"/>.</param>
            <returns>The result <see cref="T:Arch.Core.Slot"/>.</returns>
        </member>
        <member name="M:Arch.Core.Slot.op_Increment(Arch.Core.Slot)">
            <summary>
                Adds a plus plus operator for easy calculation of new <see cref="T:Arch.Core.Slot"/>. Increases the index by one.
            </summary>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/>.</param>
            <returns>The <see cref="T:Arch.Core.Slot"/> with index increased by one..</returns>
        </member>
        <member name="M:Arch.Core.Slot.Wrap(System.Int32)">
            <summary>
                Validates the <see cref="T:Arch.Core.Slot"/>, moves the <see cref="T:Arch.Core.Slot"/> if it is outside a <see cref="P:Arch.Core.Chunk.Capacity"/> to match it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.Core.Slot.Shift(Arch.Core.Slot@,System.Int32)">
            <summary>
                Moves or shifts this <see cref="T:Arch.Core.Slot"/> by one slot forward.
                Ensures that the slots chunkindex updated properly once the end was reached.
            </summary>
            <param name="source">The <see cref="T:Arch.Core.Slot"/> to shift by one.</param>
            <param name="sourceCapacity">The capacity of the chunk the slot is in.</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Core.Slot.Shift(Arch.Core.Slot@,System.Int32,Arch.Core.Slot@,System.Int32)">
            <summary>
                Moves or shifts the source <see cref="T:Arch.Core.Slot"/> based on the destination <see cref="T:Arch.Core.Slot"/> and calculates its new position.
                Used for copy operations to predict where the source <see cref="T:Arch.Core.Slot"/> will end up.
            </summary>
            <param name="source">The source <see cref="T:Arch.Core.Slot"/>, from which we want to calculate where it lands..</param>
            <param name="destination">The destination <see cref="T:Arch.Core.Slot"/>, a reference point at which the copy or shift operation starts.</param>
            <param name="sourceCapacity">The source <see cref="P:Arch.Core.Chunk.Capacity"/>.</param>
            <param name="destinationCapacity">The destination <see cref="P:Arch.Core.Chunk.Capacity"/></param>
        </member>
        <member name="T:Arch.Core.Archetype">
            <summary>
                The <see cref="T:Arch.Core.Archetype"/> class contains all <see cref="T:Arch.Core.Entity"/>'s of a unique combination of component types.
                These are stored in multiple <see cref="T:Arch.Core.Chunk"/>'s located within the <see cref="P:Arch.Core.Archetype.Chunks"/>-Array.
                The <see cref="T:Arch.Core.Archetype"/> class provides several methods to manage its stored <see cref="T:Arch.Core.Entity"/>'s and their <see cref="T:Arch.Core.Chunk"/>'s.
            </summary>
        </member>
        <member name="F:Arch.Core.Archetype.BaseSize">
            <summary>
                The minimum size of a regular L1 cache.
            </summary>
        </member>
        <member name="F:Arch.Core.Archetype._componentIdToArrayIndex">
            <summary>
                A lookup array that maps the component id to an index within the component array of a <see cref="T:Arch.Core.Chunk"/> to quickly find the correct array for the component type.
                Is being stored here since all <see cref="P:Arch.Core.Archetype.Chunks"/> share the same instance to reduce allocations.
            </summary>
        </member>
        <member name="M:Arch.Core.Archetype.#ctor(Arch.Core.Utils.ComponentType[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Archetype"/> class by a group of components.
            </summary>
            <param name="types">The component structure of the <see cref="T:Arch.Core.Entity"/>'s that can be stored in this <see cref="T:Arch.Core.Archetype"/>.</param>
        </member>
        <member name="P:Arch.Core.Archetype.Types">
            <summary>
                The component types that the <see cref="T:Arch.Core.Entity"/>'s stored here have.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.BitSet">
            <summary>
                A bitset representation of the <see cref="P:Arch.Core.Archetype.Types"/> array for fast lookups and queries.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.EntitiesPerChunk">
            <summary>
                The number of entities that are stored per <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.ChunkSize">
            <summary>
                The size of a <see cref="T:Arch.Core.Chunk"/> within the <see cref="P:Arch.Core.Archetype.Chunks"/> in KB.
                Necessary because the <see cref="T:Arch.Core.Archetype"/> adjusts the size of a <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.MinimumAmountOfEntitiesPerChunk">
            <summary>
                The minimum number of <see cref="T:Arch.Core.Entity"/>'s that should fit into a <see cref="T:Arch.Core.Chunk"/> within this <see cref="T:Arch.Core.Archetype"/>.
                On the basis of this, the <see cref="P:Arch.Core.Archetype.ChunkSize"/> is increased.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.Capacity">
            <summary>
                How many <see cref="T:Arch.Core.Chunk"/>' have been deposited within the <see cref="P:Arch.Core.Archetype.Chunks"/> array.
                The total capacity.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.Size">
            <summary>
                The number of occupied/used <see cref="T:Arch.Core.Chunk"/>'s within the <see cref="P:Arch.Core.Archetype.Chunks"/> array.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.Chunks">
            <summary>
                An array which stores the <see cref="T:Arch.Core.Chunk"/>'s.
                May contain null references since its being pooled, therefore use the <see cref="P:Arch.Core.Archetype.Size"/> and <see cref="P:Arch.Core.Archetype.Capacity"/> for acessing it.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.LastChunk">
            <summary>
                Points to the last <see cref="T:Arch.Core.Chunk"/> that is not yet full.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.LastSlot">
            <summary>
                Points to the last <see cref="T:Arch.Core.Slot"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Archetype.Entities">
            <summary>
                The number of <see cref="T:Arch.Core.Entity"/>s in this <see cref="T:Arch.Core.Archetype"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Archetype.Add(Arch.Core.Entity,Arch.Core.Slot@)">
            <summary>
                Adds an <see cref="T:Arch.Core.Entity"/> to the <see cref="T:Arch.Core.Archetype"/> and offloads it to a <see cref="T:Arch.Core.Chunk"/>.
                Uses the last <see cref="T:Arch.Core.Chunk"/> that is not full, once it is full and the capacity is exhausted, a new <see cref="T:Arch.Core.Chunk"/> is allocated.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> that is added.</param>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/> in which it was deposited.</param>
            <returns>True if a new <see cref="T:Arch.Core.Chunk"/> was allocated, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Remove(Arch.Core.Slot@,System.Int32@)">
            <summary>
                Removes an <see cref="T:Arch.Core.Entity"/> from a <see cref="T:Arch.Core.Slot"/> and moves the last <see cref="T:Arch.Core.Entity"/> of the <see cref="T:Arch.Core.Archetype"/> to its position.
            </summary>
            <param name="slot">The slot of the <see cref="T:Arch.Core.Entity"/> to be removed.</param>
            <param name="movedEntityId">The id of the <see cref="T:Arch.Core.Entity"/> that was moved to the position of the deleted <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if a <see cref="T:Arch.Core.Chunk"/> was deleted, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Set``1(Arch.Core.Slot@,``0@)">
            <summary>
                Sets or replaces the components of an <see cref="T:Arch.Core.Entity"/> at a given <see cref="T:Arch.Core.Slot"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/> at which the component of an <see cref="T:Arch.Core.Entity"/> is to be set or replaced.</param>
            <param name="cmp">The component value.</param>
        </member>
        <member name="M:Arch.Core.Archetype.Has``1">
            <summary>
                 Checks if the <see cref="T:Arch.Core.Archetype"/> stores <see cref="T:Arch.Core.Entity"/>'s with a specific component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>True if the <see cref="T:Arch.Core.Archetype"/> stores <see cref="T:Arch.Core.Entity"/>'s with such a component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Get``1(Arch.Core.Slot@)">
            <summary>
                Returns a reference of the component of an <see cref="T:Arch.Core.Entity"/> at a given <see cref="T:Arch.Core.Slot"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Entity(Arch.Core.Slot@)">
            <summary>
                Returns a reference of the <see cref="T:Arch.Core.Entity"/> at a given <see cref="T:Arch.Core.Slot"/>.
            </summary>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/>.</param>
            <returns>A reference to the <see cref="T:Arch.Core.Entity"/>.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.GetChunk(System.Int32)">
            NOTE: Causes bounds check, any way to avoid that ?
            <summary>
                Returns a reference to a given <see cref="T:Arch.Core.Chunk"/> using its index.
            </summary>
            <param name="index"></param>
            <returns>A reference to the <see cref="T:Arch.Core.Chunk"/> at the given index.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.SetRange``1(Arch.Core.Slot@,Arch.Core.Slot@,``0@)">
            <summary>
                Sets a component value for all entities within an <see cref="T:Arch.Core.Archetype"/> in a certain range of <see cref="T:Arch.Core.Slot"/>s
            </summary>
            <param name="from">The <see cref="T:Arch.Core.Slot"/> where we start.</param>
            <param name="to">The <see cref="T:Arch.Core.Slot"/> where we end.</param>
            <param name="component">The component value.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.Archetype.GetEnumerator">
            <summary>
                Creates an <see cref="T:Arch.Core.Enumerator`1"/> which iterates over all <see cref="P:Arch.Core.Archetype.Chunks"/> in this <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <returns>An <see cref="T:Arch.Core.Enumerator`1"/>.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.GetRangeIterator(System.Int32,System.Int32)">
            <summary>
                Creates an <see cref="T:Arch.Core.ChunkRangeEnumerator"/> which iterates over all <see cref="P:Arch.Core.Archetype.Chunks"/> within a range backwards.
            </summary>
            <returns>A <see cref="T:Arch.Core.ChunkRangeEnumerator"/>.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.GetRangeIterator(System.Int32)">
            <summary>
                Creates an <see cref="T:Arch.Core.ChunkRangeEnumerator"/> which iterates from the last valid chunk to another <see cref="P:Arch.Core.Archetype.Chunks"/> within a range backwards.
            </summary>
            <returns>A <see cref="T:Arch.Core.ChunkRangeEnumerator"/>.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Clear">
            <summary>
                Cleares this <see cref="T:Arch.Core.Archetype"/>, an efficient method to delete all <see cref="T:Arch.Core.Entity"/>s.
                Does not dispose any resources nor modifies its <see cref="P:Arch.Core.Archetype.Capacity"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Archetype.ToString">
            <summary>
                Converts this <see cref="T:Arch.Core.Archetype"/> to a human readable string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Set(Arch.Core.Slot@,System.Object@)">
            <summary>
                Sets or replaces the components of an <see cref="T:Arch.Core.Entity"/> at a given <see cref="T:Arch.Core.Slot"/>.
            </summary>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/> at which the component of an <see cref="T:Arch.Core.Entity"/> is to be set or replaced.</param>
            <param name="cmp">The component value.</param>
        </member>
        <member name="M:Arch.Core.Archetype.Has(Arch.Core.Utils.ComponentType)">
            <summary>
                 Checks if the <see cref="T:Arch.Core.Archetype"/> stores <see cref="T:Arch.Core.Entity"/>'s with a specific component.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>True if the <see cref="T:Arch.Core.Archetype"/> stores <see cref="T:Arch.Core.Entity"/>'s with such a component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.Get(Arch.Core.Slot@,Arch.Core.Utils.ComponentType)">
            <summary>
                Returns a reference of the component of an <see cref="T:Arch.Core.Entity"/> at a given <see cref="T:Arch.Core.Slot"/>.
            </summary>
            <param name="type">The component <see cref="T:System.Type"/>.</param>
            <param name="slot">The <see cref="T:Arch.Core.Slot"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.MinimumRequiredChunkSize(Arch.Core.Utils.ComponentType[])">
            <summary>
                Calculates how many <see cref="T:Arch.Core.Chunk"/>'s are needed to fulfill the <see cref="P:Arch.Core.Archetype.MinimumAmountOfEntitiesPerChunk"/>.
            </summary>
            <param name="types">The component structure of the <see cref="T:Arch.Core.Entity"/>'s.</param>
            <returns>The amount of <see cref="T:Arch.Core.Chunk"/>'s required.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.CalculateEntitiesPerChunk(Arch.Core.Utils.ComponentType[])">
            <summary>
                Calculates how many <see cref="T:Arch.Core.Entity"/>'s fit into one <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <param name="types">The component structure of the <see cref="T:Arch.Core.Entity"/>'s.</param>
            <returns>The amount of <see cref="T:Arch.Core.Entity"/>'s.</returns>
        </member>
        <member name="M:Arch.Core.Archetype.EnsureCapacity(System.Int32)">
            <summary>
                Ensures the capacity of the <see cref="P:Arch.Core.Archetype.Chunks"/> array.
                Increases the <see cref="P:Arch.Core.Archetype.Capacity"/>.
            </summary>
            <param name="newCapacity">The amount of <see cref="T:Arch.Core.Chunk"/>'s required, in total.</param>
        </member>
        <member name="M:Arch.Core.Archetype.EnsureEntityCapacity(System.Int32)">
            TODO : Currently this only ensures additional entity capacity, instead it should take the whole capacity in count.
            <summary>
                Ensures the capacity of the <see cref="P:Arch.Core.Archetype.Chunks"/> array.
                Increases the <see cref="P:Arch.Core.Archetype.Capacity"/>.
            </summary>
            <param name="newCapacity">The amount of <see cref="T:Arch.Core.Chunk"/>'s required, in total.</param>
        </member>
        <member name="M:Arch.Core.Archetype.TrimExcess">
            <summary>
                Trims the capacity of the <see cref="P:Arch.Core.Archetype.Chunks"/> array to its used minimum.
                Reduces the <see cref="P:Arch.Core.Archetype.Capacity"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Archetype.Reserve(System.Int32@)">
            <summary>
                Reserves space for a certain number of <see cref="T:Arch.Core.Entity"/>'s in addition to the already existing amount.
            </summary>
            <param name="amount">The amount of new <see cref="T:Arch.Core.Entity"/>'s.</param>
        </member>
        <member name="M:Arch.Core.Archetype.Copy(Arch.Core.Archetype,Arch.Core.Archetype)">
            <summary>
                Copies all <see cref="P:Arch.Core.Archetype.Chunks"/> from one <see cref="T:Arch.Core.Archetype"/> to another.
                Deterministic, the content of the first <see cref="T:Arch.Core.Archetype"/> will be copied to the other <see cref="T:Arch.Core.Archetype"/>, attached to its last partial <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <param name="source">The source <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="destination">The destination <see cref="T:Arch.Core.Archetype"/>.</param>
        </member>
        <member name="M:Arch.Core.Archetype.CopyComponents(Arch.Core.Archetype,Arch.Core.Slot@,Arch.Core.Archetype,Arch.Core.Slot@)">
            <summary>
                Copies an <see cref="T:Arch.Core.Entity"/> and all its components from a <see cref="T:Arch.Core.Slot"/> within this <see cref="T:Arch.Core.Archetype"/> to a <see cref="T:Arch.Core.Slot"/> within another <see cref="T:Arch.Core.Archetype"/> .
            </summary>
            <param name="to">The <see cref="T:Arch.Core.Archetype"/> into which the <see cref="T:Arch.Core.Entity"/> should move.</param>
            <param name="fromSlot">The <see cref="T:Arch.Core.Slot"/> that targets the <see cref="T:Arch.Core.Entity"/> that should move.</param>
            <param name="toSlot">The <see cref="T:Arch.Core.Slot"/> to which the <see cref="T:Arch.Core.Entity"/> should move.</param>
        </member>
        <member name="F:Arch.Core.Archetype.EdgesArrayMaxSize">
            <summary>
                The max <see cref="F:Arch.Core.Utils.ComponentType.Id"/> that <see cref="F:Arch.Core.Archetype._addEdges"/>
                will use for its array storage before using a dictionary.
            </summary>
        </member>
        <member name="F:Arch.Core.Archetype._addEdges">
            <summary>
                Caches other <see cref="T:Arch.Core.Archetype"/>s indexed by the
                <see cref="F:Arch.Core.Utils.ComponentType.Id"/> that needs to be added in order to reach them.
                Those with a <see cref="F:Arch.Core.Utils.ComponentType.Id"/> equal to or lower than
                <see cref="F:Arch.Core.Archetype.EdgesArrayMaxSize"/> are accessed through an array lookup,
                otherwise a dictionary is used.
            </summary>
            <remarks>The index used is <see cref="F:Arch.Core.Utils.ComponentType.Id"/> minus one.</remarks>
        </member>
        <member name="M:Arch.Core.Archetype.CreateAddEdge(System.Int32,Arch.Core.Archetype)">
            <summary>
                Tries to get a cached archetype that is reached through adding a component
                type to this archetype.
            </summary>
            <param name="index">
                The index of the archetype in the cache, <see cref="F:Arch.Core.Utils.ComponentType.Id"/> - 1
            </param>
            <param name="archetype">The archetype to cache.</param>
        </member>
        <member name="M:Arch.Core.Archetype.TryGetAddEdge(System.Int32,Arch.Core.Archetype@)">
            <summary>
                Tries to get a cached archetype that is reached through adding a component
                type to this archetype.
            </summary>
            <param name="index">
                The index of the archetype in the cache, <see cref="F:Arch.Core.Utils.ComponentType.Id"/> - 1
            </param>
            <param name="archetype">The cached archetype if it exists, null otherwise.</param>
            <returns>True if the archetype exists, false otherwise.</returns>
        </member>
        <member name="T:Arch.Core.Chunk">
            <summary>
                The <see cref="T:Arch.Core.Chunk"/> struct represents a contiguous block of memory in which various components are stored in Structure of Arrays.
                Chunks are internally allocated and filled by <see cref="T:Arch.Core.Archetype"/>'s.
                Through them it is possible to efficiently provide or trim memory for additional entities.
            </summary>
        </member>
        <member name="M:Arch.Core.Chunk.#ctor(System.Int32,Arch.Core.Utils.ComponentType[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Chunk"/> struct.
                Automatically creates a lookup array for quick access to internal components.
            </summary>
            <param name="capacity">How many entities of the respective component structure fit into this <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="types">The respective component structure of all entities in this <see cref="T:Arch.Core.Chunk"/>.</param>
        </member>
        <member name="M:Arch.Core.Chunk.#ctor(System.Int32,System.Int32[],Arch.Core.Utils.ComponentType[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Chunk"/> struct
            </summary>
            <param name="capacity">How many entities of the respective component structure fit into this <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="componentIdToArrayIndex">A lookup array which maps the component id to the array index of the component array.</param>
            <param name="types">The respective component structure of all entities in this <see cref="T:Arch.Core.Chunk"/>.</param>
        </member>
        <member name="P:Arch.Core.Chunk.Entities">
            <summary>
                The <see cref="T:Arch.Core.Entity"/>'s that are stored in this chunk.
                Can be accessed during the iteration.
            </summary>
        </member>
        <member name="P:Arch.Core.Chunk.Components">
            <summary>
                The component arrays in which the components of the <see cref="T:Arch.Core.Entity"/>'s are stored.
                Represent the component structure.
                They can be accessed quickly using the <see cref="P:Arch.Core.Chunk.ComponentIdToArrayIndex"/> or one of the chunk methods.
            </summary>
        </member>
        <member name="P:Arch.Core.Chunk.ComponentIdToArrayIndex">
            <summary>
                The lookup array that maps component ids to component array indexes to quickly access them.
            </summary>
        </member>
        <member name="P:Arch.Core.Chunk.Size">
            <summary>
                The number of occupied <see cref="T:Arch.Core.Entity"/> slots in this <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Chunk.Capacity">
            <summary>
                The number of possible <see cref="T:Arch.Core.Entity"/>'s in this <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Chunk.Add(Arch.Core.Entity)">
            <summary>
                Inserts an entity into the <see cref="T:Arch.Core.Chunk"/>.
                This won't fire an event for <see cref="T:Arch.Core.Events.EntityCreatedHandler"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/> that will be inserted.</param>
            <returns>The index occupied by the <see cref="T:Arch.Core.Entity"/> in the chunk.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Set``1(System.Int32,``0@)">
            <summary>
                Sets or replaces a component for an index in the chunk.
                This won't fire an event for <see cref="T:Arch.Core.Events.ComponentSetHandler`1"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="index">The index in the array.</param>
            <param name="cmp">The component value.</param>
        </member>
        <member name="M:Arch.Core.Chunk.Has``1">
            <summary>
                Checks if a component is included in this <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>True if included, false otherwise.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Get``1(System.Int32)">
            <summary>
                Returns a component from an index within the <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="index">The index.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Get``1(``0@,System.Int32)">
            <summary>
                Returns a component at the index of the passed array.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="first">The first element of the array.</param>
            <param name="index">The index.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.GetRow``1(System.Int32)">
            <summary>
                Returns a component and <see cref="T:Arch.Core.Entity"/> from an index within the <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="index">The index.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Entity(System.Int32)">
            <summary>
                Returns an <see cref="T:Arch.Core.Entity"/> at the index.
            </summary>
            <param name="index">The index.</param>
            <returns>A reference to the <see cref="T:Arch.Core.Entity"/>.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Remove(System.Int32)">
            <summary>
                Removes the <see cref="T:Arch.Core.Entity"/> at an index with all its components.
                Copies the last <see cref="T:Arch.Core.Entity"/> in its place to ensure a uniform array.
                This won't fire an event for <see cref="T:Arch.Core.Events.ComponentRemovedHandler"/>.
            </summary>
            <param name="index">Its index.</param>
        </member>
        <member name="M:Arch.Core.Chunk.GetEnumerator">
            <summary>
                Creates and returns a new <see cref="T:Arch.Core.EntityEnumerator"/> instance to iterate over all used rows representing <see cref="T:Arch.Core.Entity"/>'s.
            </summary>
            <returns>A new <see cref="T:Arch.Core.EntityEnumerator"/> instance.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Clear">
            <summary>
                Cleares this <see cref="T:Arch.Core.Chunk"/>, an efficient method to delete all <see cref="T:Arch.Core.Entity"/>s.
                Does not dispose any resources nor modifies its <see cref="P:Arch.Core.Chunk.Capacity"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Chunk.ToString">
            <summary>
                Converts this <see cref="T:Arch.Core.Chunk"/> to a human readable string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Index``1">
            <summary>
                Returns the component array index of a component.
            </summary>
            <typeparam name="T">The componen type.</typeparam>
            <returns>The index in the <see cref="P:Arch.Core.Chunk.Components"/> array.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.GetArray``1">
            <summary>
                Returns the component array for a given component in an unsafe manner.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The array.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.GetSpan``1">
            <summary>
                Returns the component array <see cref="T:System.Span`1"/> for a given component in an unsafe manner.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The array <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.GetFirst``1">
            <summary>
                Returns a reference to the first element of a component from its component array in an unsafe manner.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>A reference to the first element.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Set(System.Int32,System.Object)">
            <summary>
                Sets or replaces a component for an index in the chunk.
                This won't fire an event for <see cref="T:Arch.Core.Events.ComponentSetHandler`1"/>.
            </summary>
            <param name="index">The index in the array.</param>
            <param name="cmp">The component value.</param>
        </member>
        <member name="M:Arch.Core.Chunk.Has(Arch.Core.Utils.ComponentType)">
            <summary>
                Checks if a component is included in this <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <param name="t">The type.</param>
            <returns>True if included, false otherwise.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Get(System.Int32,Arch.Core.Utils.ComponentType)">
            <summary>
                Returns a component from an index within the <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="index">The index.</param>
            <returns>A component casted to an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Index(Arch.Core.Utils.ComponentType)">
            <summary>
                Returns the component array index of a component by its type.
            </summary>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>The index in the <see cref="P:Arch.Core.Chunk.Components"/> array.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.GetArray(Arch.Core.Utils.ComponentType)">
            <summary>
                 Returns the component array for a given component type.
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:Arch.Core.Chunk.Copy(Arch.Core.Chunk@,System.Int32,Arch.Core.Chunk@,System.Int32,System.Int32)">
            <summary>
             Copies the whole <see cref="T:Arch.Core.Chunk"/> (with all its entities and components) or a part from it to the another <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <param name="source">The source <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="index">The start index in the source <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="destination">The destination <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="destinationIndex">The start index in the destination <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="length">The length indicating the amount of <see cref="M:Arch.Core.Chunk.Entity(System.Int32)"/>s being copied.</param>
        </member>
        <member name="M:Arch.Core.Chunk.CopyComponents(Arch.Core.Chunk@,System.Int32,Arch.Core.Chunk@,System.Int32,System.Int32)">
            <summary>
                Copies an <see cref="T:Arch.Core.Entity"/> components at one index to another <see cref="T:Arch.Core.Chunk"/>-index.
            </summary>
            <param name="source">The source <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="index">The start index in the source <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="destination">The destination <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="destinationIndex">The start index in the destination <see cref="T:Arch.Core.Chunk"/>.</param>
            <param name="length">The length indicating the amount of <see cref="M:Arch.Core.Chunk.Entity(System.Int32)"/>s being copied.</param>
        </member>
        <member name="M:Arch.Core.Chunk.Transfer(System.Int32,Arch.Core.Chunk@)">
            <summary>
                Transfers the last <see cref="T:Arch.Core.Entity"/> of the referenced <see cref="T:Arch.Core.Chunk"/> into this <see cref="T:Arch.Core.Chunk"/> at the given index.
            </summary>
            <param name="index">The index of the <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="chunk">The <see cref="T:Arch.Core.Chunk"/> we want transfer the last <see cref="T:Arch.Core.Entity"/> from.</param>
            <returns></returns>
        </member>
        <member name="T:Arch.Core.World">
            <summary>
                The <see cref="T:Arch.Core.World"/> class
                stores <see cref="T:Arch.Core.Entity"/>'s in <see cref="T:Arch.Core.Archetype"/>'s and <see cref="T:Arch.Core.Chunk"/>'s, manages them and provides methods to query for specific <see cref="T:Arch.Core.Entity"/>'s.
            </summary>
        </member>
        <member name="M:Arch.Core.World.GetOrCreateArchetypeByEdge(Arch.Core.Utils.ComponentType@,Arch.Core.Archetype)">
            <summary>
                Creates or returns an <see cref="T:Arch.Core.Archetype"/> based on the old one with one additional component.
                Automatically creates a link between them for quick access. 
            </summary>
            <param name="type">The new <see cref="T:Arch.Core.Utils.ComponentType"/> that additionally forms a new <see cref="T:Arch.Core.Archetype"/> with the old components of the old archetype.</param>
            <param name="oldArchetype">The old <see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>The cached or newly created <see cref="T:Arch.Core.Archetype"/> with that additional component.</returns>
        </member>
        <member name="F:Arch.Core.World.InitialCapacity">
            <summary>
                The initial capacity for the <see cref="F:Arch.Core.World._compEvents"/> array. 
            </summary>
        </member>
        <member name="F:Arch.Core.World._entityCreatedHandlers">
            <summary>
                All <see cref="T:Arch.Core.Events.EntityCreatedHandler"/>s in a <see cref="T:System.Collections.Generic.List`1"/> which will be called upon entity creation.
            </summary>
        </member>
        <member name="F:Arch.Core.World._entityDestroyedHandlers">
            <summary>
                All <see cref="T:Arch.Core.Events.EntityDestroyedHandler"/>s in a <see cref="T:System.Collections.Generic.List`1"/> which will be called upon entity destruction.
            </summary>
        </member>
        <member name="F:Arch.Core.World._compEvents">
            <summary>
                All <see cref="N:Arch.Core.Events"/> in an array which will be acessed for add, remove or set operations. 
            </summary>
        </member>
        <member name="M:Arch.Core.World.SubscribeEntityCreated(Arch.Core.Events.EntityCreatedHandler)">
            <summary>
                Adds a delegate to be called when an entity is created.
            </summary>
            <param name="handler">The delegate to call.</param>
        </member>
        <member name="M:Arch.Core.World.SubscribeEntityDestroyed(Arch.Core.Events.EntityDestroyedHandler)">
            <summary>
                Adds a delegate to be called when an entity is destroyed.
            </summary>
            <param name="handler">The delegate to call.</param>
        </member>
        <member name="M:Arch.Core.World.SubscribeComponentAdded``1(Arch.Core.Events.ComponentAddedHandler{``0})">
            <summary>
                Adds a delegate to be called when a component of type <see cref="!:T"/> is added to an entity.
                <see cref="M:Arch.Core.World.Add(Arch.Core.Entity,System.Object@)"/>
            </summary>
            <param name="handler">The delegate to call.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.SubscribeComponentSet``1(Arch.Core.Events.ComponentSetHandler{``0})">
            <summary>
                Adds a delegate to be called when a component of type <see cref="!:T"/> is set on an entity.
                <see cref="M:Arch.Core.World.Set(Arch.Core.Entity,System.Object)"/>
            </summary>
            <param name="handler">The delegate to call.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.SubscribeComponentRemoved``1(Arch.Core.Events.ComponentRemovedHandler{``0})">
            <summary>
                Adds a delegate to be called when a component of type <see cref="!:T"/> is removed from an entity.
                <see cref="M:Arch.Core.World.Remove(Arch.Core.Entity,Arch.Core.Utils.ComponentType)"/>
            </summary>
            <param name="handler">The delegate to call.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.OnEntityCreated(Arch.Core.Entity)">
            <summary>
                Calls all handlers subscribed to entity creation.
            </summary>
            <param name="entity">The entity that got created.</param>
        </member>
        <member name="M:Arch.Core.World.OnEntityDestroyed(Arch.Core.Entity)">
            <summary>
                Calls all handlers subscribed to entity deletion.
            </summary>
            <param name="entity">The entity that got destroyed.</param>
        </member>
        <member name="M:Arch.Core.World.OnComponentAdded``1(Arch.Core.Entity)">
            <summary>
                Calls all generic handlers subscribed to component addition of this type.
            </summary>
            <param name="entity">The entity that the component was added to.</param>
            <typeparam name="T">The type of component that got added.</typeparam>
        </member>
        <member name="M:Arch.Core.World.OnComponentSet``1(Arch.Core.Entity)">
            <summary>
                Calls all generic handlers subscribed to component setting of this type.
            </summary>
            <param name="entity">The entity that the component was set on.</param>
            <typeparam name="T">The type of component that got set.</typeparam>
        </member>
        <member name="M:Arch.Core.World.OnComponentRemoved``1(Arch.Core.Entity)">
            <summary>
                Calls all generic handlers subscribed to component removal.
            </summary>
            <param name="entity">The entity that the component was removed from.</param>
            <typeparam name="T">The type of component that got removed.</typeparam>
        </member>
        <member name="M:Arch.Core.World.OnComponentAdded(Arch.Core.Entity,Arch.Core.Utils.ComponentType)">
            <summary>
                Calls all handlers subscribed to component addition of this type.
            </summary>
            <param name="entity">The entity that the component was added to.</param>
            <param name="compType">The type of component that got added.</param>
        </member>
        <member name="M:Arch.Core.World.OnComponentSet(Arch.Core.Entity,System.Object)">
            <summary>
                Calls all handlers subscribed to component setting of this type.
            </summary>
            <param name="entity">The entity that the component was set on.</param>
            <param name="comp">The component instance that got set.</param>
        </member>
        <member name="M:Arch.Core.World.OnComponentRemoved(Arch.Core.Entity,Arch.Core.Utils.ComponentType)">
            <summary>
                Calls all handlers subscribed to component removal.
            </summary>
            <param name="entity">The entity that the component was removed from.</param>
            <param name="compType">The type of component that got removed.</param>
        </member>
        <member name="M:Arch.Core.World.OnComponentAdded``1(Arch.Core.Archetype)">
            <summary>
                Calls all handlers subscribed to component addition of this type for entities in a archetype range.
            </summary>
            <param name="archetype">The <see cref="T:Arch.Core.Archetype"/>.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.OnComponentRemoved``1(Arch.Core.Archetype)">
            <summary>
                Calls all handlers subscribed to component removal of this type for entities in a archetype range.
            </summary>
            <param name="archetype">The <see cref="T:Arch.Core.Archetype"/>.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.GetEvents``1">
            <summary>
                Gets all generic event handlers for a certain component type.
            </summary>
            <typeparam name="T">The type of component to get handlers for.</typeparam>
            <returns>All handlers for the given component type.</returns>
        </member>
        <member name="M:Arch.Core.World.GetEvents(Arch.Core.Utils.ComponentType)">
            TODO : Remove creating by activator. Instead we should probably keep two lists. One for object based calls, one for generics.
            <summary>
                Gets all event handlers for a certain component type.
            </summary>
            <param name="compType">The type of component to get handlers for.</param>
            <returns>All handlers for the given component type.</returns>
        </member>
        <member name="P:Arch.Core.World.JobHandles">
            <summary>
                A list of <see cref="T:JobScheduler.JobHandle"/> which are pooled to avoid allocs.
            </summary>
        </member>
        <member name="P:Arch.Core.World.JobsCache">
            <summary>
                A cache used for the parallel queries to prevent list allocations.
            </summary>
        </member>
        <member name="M:Arch.Core.World.ParallelQuery(Arch.Core.QueryDescription@,Arch.Core.ForEach)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the passed <see cref="T:Arch.Core.ForEach"/> delegate.
                Runs multithreaded and will process the matching <see cref="T:Arch.Core.Entity"/>'s in parallel.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="forEntity">The <see cref="T:Arch.Core.ForEach"/> delegate.</param>
        </member>
        <member name="M:Arch.Core.World.InlineParallelQuery``1(Arch.Core.QueryDescription@)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the <see cref="T:Arch.Core.IForEach"/> struct.
                Runs multithreaded and will process the matching <see cref="T:Arch.Core.Entity"/>'s in parallel.
            </summary>
            <typeparam name="T">A struct implementation of the <see cref="T:Arch.Core.IForEach"/> interface which is called on each <see cref="T:Arch.Core.Entity"/> found.</typeparam>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
        </member>
        <member name="M:Arch.Core.World.InlineParallelQuery``1(Arch.Core.QueryDescription@,Arch.Core.IForEachJob{``0}@)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the passed <see cref="T:Arch.Core.IForEach"/> struct.
                Runs multithreaded and will process the matching <see cref="T:Arch.Core.Entity"/>'s in parallel.
            </summary>
            <typeparam name="T">A struct implementation of the <see cref="T:Arch.Core.IForEach"/> interface which is called on each <see cref="T:Arch.Core.Entity"/> found.</typeparam>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="iForEach">The struct instance of the generic type being invoked.</param>
        </member>
        <member name="M:Arch.Core.World.InlineParallelChunkQuery``1(Arch.Core.QueryDescription@,``0@)">
            <summary>
                Finds all matching <see cref="T:Arch.Core.Chunk"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls an <see cref="T:Arch.Core.IChunkJob"/> on them.
            </summary>
            <typeparam name="T">A struct implementation of the <see cref="T:Arch.Core.IChunkJob"/> interface which is called on each <see cref="T:Arch.Core.Chunk"/> found.</typeparam>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Chunk"/>'s are searched for.</param>
            <param name="innerJob">The struct instance of the generic type being invoked.</param>
            <exception cref="T:System.Exception">An <see cref="T:System.Exception"/> if the <see cref="N:JobScheduler"/> was not initialized before.</exception>
        </member>
        <member name="M:Arch.Core.World.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.World"/> class
            </summary>
            <param name="id">Its unique id.</param>
        </member>
        <member name="P:Arch.Core.World.Worlds">
            <summary>
                A list of all existing <see cref="P:Arch.Core.World.Worlds"/>.
                Should not be modified by the user.
            </summary>
        </member>
        <member name="P:Arch.Core.World.Id">
            <summary>
                The unique <see cref="T:Arch.Core.World"/> id.
            </summary>
        </member>
        <member name="P:Arch.Core.World.Size">
            <summary>
                The amount of <see cref="T:Arch.Core.Entity"/>'s stored by this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.World.Capacity">
            <summary>
                The available capacity for <see cref="T:Arch.Core.Entity"/>'s by this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.World.Archetypes">
            <summary>
                All <see cref="T:Arch.Core.Archetype"/>'s that exist in this <see cref="T:Arch.Core.World"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.World.EntityInfo">
            <summary>
                Mapt an <see cref="T:Arch.Core.Entity"/> to its <see cref="P:Arch.Core.World.EntityInfo"/> for quick lookups.
            </summary>
        </member>
        <member name="P:Arch.Core.World.RecycledIds">
            <summary>
                Stores recycled <see cref="T:Arch.Core.Entity"/> ids and their last version.
            </summary>
        </member>
        <member name="P:Arch.Core.World.QueryCache">
            <summary>
                A cache to map <see cref="T:Arch.Core.QueryDescription"/> to their <see cref="T:Arch.Core.Query"/> to avoid allocs.
            </summary>
        </member>
        <member name="M:Arch.Core.World.Create">
            <summary>
                Creates a <see cref="T:Arch.Core.World"/> instance.
            </summary>
            <returns>The created <see cref="T:Arch.Core.World"/> instance.</returns>
        </member>
        <member name="M:Arch.Core.World.Destroy(Arch.Core.World)">
            <summary>
                Destroys an existing <see cref="T:Arch.Core.World"/>.
            </summary>
            <param name="world">The <see cref="T:Arch.Core.World"/>.</param>
        </member>
        <member name="M:Arch.Core.World.Reserve(System.Span{Arch.Core.Utils.ComponentType},System.Int32)">
            <summary>
                Reserves space for a certain number of <see cref="T:Arch.Core.Entity"/>'s of a given component structure/<see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="types">The component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Arch.Core.World.Create(Arch.Core.Utils.ComponentType[])">
            <summary>
                Creates a new <see cref="T:Arch.Core.Entity"/> using its given component structure/<see cref="T:Arch.Core.Archetype"/>.
                Might resize its target <see cref="T:Arch.Core.Archetype"/> and allocate new space if its full.
            </summary>
            <param name="types">Its component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Core.World.Create(System.Span{Arch.Core.Utils.ComponentType})">
            <summary>
                Creates a new <see cref="T:Arch.Core.Entity"/> using its given component structure/<see cref="T:Arch.Core.Archetype"/>.
                Might resize its target <see cref="T:Arch.Core.Archetype"/> and allocate new space if its full.
            </summary>
            <param name="types">Its component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Core.World.Move(Arch.Core.Entity,Arch.Core.Archetype,Arch.Core.Archetype,Arch.Core.Slot@)">
            <summary>
                Moves an <see cref="T:Arch.Core.Entity"/> from one <see cref="T:Arch.Core.Archetype"/> <see cref="T:Arch.Core.Slot"/> to another.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="source">Its <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="destination">The new <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="destinationSlot">The new <see cref="T:Arch.Core.Slot"/> where moved <see cref="T:Arch.Core.Entity"/> landed in.</param>
        </member>
        <member name="M:Arch.Core.World.Destroy(Arch.Core.Entity)">
            <summary>
                Destroys an <see cref="T:Arch.Core.Entity"/>.
                Might resize its target <see cref="T:Arch.Core.Archetype"/> and release memory.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.World.TrimExcess">
            <summary>
                Trims this <see cref="T:Arch.Core.World"/> instance and releases unused memory.
                Should not be called every single update or frame.
                One single <see cref="T:Arch.Core.Chunk"/> from each <see cref="T:Arch.Core.Archetype"/> is spared.
            </summary>
        </member>
        <member name="M:Arch.Core.World.Clear">
            <summary>
                Clears or resets this <see cref="T:Arch.Core.World"/> instance, will drop used <see cref="P:Arch.Core.World.Archetypes"/> and therefore release some memory sooner or later.
            </summary>
        </member>
        <member name="M:Arch.Core.World.Query(Arch.Core.QueryDescription@)">
            <summary>
                Creates a <see cref="T:Arch.Core.Query"/> using a <see cref="T:Arch.Core.QueryDescription"/>
                which can be used to iterate over the matching <see cref="T:Arch.Core.Entity"/>'s, <see cref="T:Arch.Core.Archetype"/>'s and <see cref="T:Arch.Core.Chunk"/>'s.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components are searched for.</param>
            <returns></returns>
        </member>
        <member name="M:Arch.Core.World.CountEntities(Arch.Core.QueryDescription@)">
            <summary>
                Counts all <see cref="T:Arch.Core.Entity"/>'s that match a <see cref="T:Arch.Core.QueryDescription"/> and returns the number.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components or <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
        </member>
        <member name="M:Arch.Core.World.GetEntities(Arch.Core.QueryDescription@,System.Span{Arch.Core.Entity},System.Int32)">
            <summary>
                Search all matching <see cref="T:Arch.Core.Entity"/>'s and put them into the given <see cref="T:System.Span`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components or <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="list">The <see cref="T:System.Span`1"/> receiving the found <see cref="T:Arch.Core.Entity"/>'s.</param>
            <param name="start">The start index inside the <see cref="T:System.Span`1"/>. Default is 0.</param>
        </member>
        <member name="M:Arch.Core.World.GetArchetypes(Arch.Core.QueryDescription@,System.Span{Arch.Core.Archetype},System.Int32)">
            <summary>
                Search all matching <see cref="T:Arch.Core.Archetype"/>'s and put them into the given <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components are searched for.</param>
            <param name="archetypes">The <see cref="T:System.Span`1"/> receiving <see cref="T:Arch.Core.Archetype"/>'s containing <see cref="T:Arch.Core.Entity"/>'s with the matching components.</param>
            <param name="start">The start index inside the <see cref="T:System.Span`1"/>. Default is 0.</param>
        </member>
        <member name="M:Arch.Core.World.GetChunks(Arch.Core.QueryDescription@,System.Span{Arch.Core.Chunk},System.Int32)">
            <summary>
                Search all matching <see cref="T:Arch.Core.Chunk"/>'s and put them into the given <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components are searched for.</param>
            <param name="chunks">The <see cref="T:System.Span`1"/> receiving <see cref="T:Arch.Core.Chunk"/>'s containing <see cref="T:Arch.Core.Entity"/>'s with the matching components.</param>
            <param name="start">The start index inside the <see cref="T:System.Span`1"/>. Default is 0.</param>
        </member>
        <member name="M:Arch.Core.World.GetEnumerator">
            <summary>
                Creates and returns a new <see cref="T:Arch.Core.Enumerator`1"/> instance to iterate over all <see cref="P:Arch.Core.World.Archetypes"/>.
            </summary>
            <returns>A new <see cref="T:Arch.Core.Enumerator`1"/> instance.</returns>
        </member>
        <member name="M:Arch.Core.World.Dispose">
            <summary>
                Disposes this <see cref="T:Arch.Core.World"/> instance and destroys it from the <see cref="P:Arch.Core.World.Worlds"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.World.ToString">
            <summary>
                Converts this <see cref="T:Arch.Core.World"/> to a human readable string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Arch.Core.World.GroupToArchetype">
            <summary>
                Maps an <see cref="T:Arch.Core.Utils.Group"/> hash to its <see cref="T:Arch.Core.Archetype"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.World.TryGetArchetype(System.Int32,Arch.Core.Archetype@)">
            <summary>
                Trys to find an <see cref="T:Arch.Core.Archetype"/> by the hash of its components.
            </summary>
            <param name="hash">Its hash..</param>
            <param name="archetype">The found <see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>True if found, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.TryGetArchetype(Arch.Core.Utils.BitSet,Arch.Core.Archetype@)">
            <summary>
                Trys to find an <see cref="T:Arch.Core.Archetype"/> by a <see cref="T:Arch.Core.Utils.BitSet"/>.
            </summary>
            <param name="bitset">A <see cref="T:Arch.Core.Utils.BitSet"/> indicating the <see cref="T:Arch.Core.Archetype"/> structure.</param>
            <param name="archetype">The found <see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>True if found, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.TryGetArchetype(Arch.Core.Utils.SpanBitSet,Arch.Core.Archetype@)">
            <summary>
                Trys to find an <see cref="T:Arch.Core.Archetype"/> by a <see cref="T:Arch.Core.Utils.BitSet"/>.
            </summary>
            <param name="bitset">A <see cref="T:Arch.Core.Utils.SpanBitSet"/> indicating the <see cref="T:Arch.Core.Archetype"/> structure.</param>
            <param name="archetype">The found <see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>True if found, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.TryGetArchetype(System.Span{Arch.Core.Utils.ComponentType},Arch.Core.Archetype@)">
            <summary>
                Trys to find an <see cref="T:Arch.Core.Archetype"/> by the hash of its components.
            </summary>
            <param name="types">Its <see cref="T:Arch.Core.Utils.ComponentType"/>'s.</param>
            <param name="archetype">The found <see cref="T:Arch.Core.Archetype"/>.</param>
            <returns>True if found, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.GetOrCreate(System.Span{Arch.Core.Utils.ComponentType})">
            <summary>
                Returned an <see cref="T:Arch.Core.Archetype"/> based on its components. If it does not exist, it will be created.
            </summary>
            <param name="types">Its <see cref="T:Arch.Core.Utils.ComponentType"/>'s.</param>
            <returns>An existing or new <see cref="T:Arch.Core.Archetype"/>.</returns>
        </member>
        <member name="M:Arch.Core.World.Query(Arch.Core.QueryDescription@,Arch.Core.ForEach)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the passed <see cref="T:Arch.Core.ForEach"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="forEntity">The <see cref="T:Arch.Core.ForEach"/> delegate.</param>
        </member>
        <member name="M:Arch.Core.World.InlineQuery``1(Arch.Core.QueryDescription@)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the <see cref="T:Arch.Core.IForEach"/> struct.
                Inlines the call and is therefore faster than normal queries.
            </summary>
            <typeparam name="T">A struct implementation of the <see cref="T:Arch.Core.IForEach"/> interface which is called on each <see cref="T:Arch.Core.Entity"/> found.</typeparam>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
        </member>
        <member name="M:Arch.Core.World.InlineQuery``1(Arch.Core.QueryDescription@,``0@)">
            <summary>
                Searches all matching <see cref="T:Arch.Core.Entity"/>'s by a <see cref="T:Arch.Core.QueryDescription"/> and calls the passed <see cref="T:Arch.Core.IForEach"/> struct.
                Inlines the call and is therefore faster than normal queries.
            </summary>
            <typeparam name="T">A struct implementation of the <see cref="T:Arch.Core.IForEach"/> interface which is called on each <see cref="T:Arch.Core.Entity"/> found.</typeparam>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="iForEach">The struct instance of the generic type being invoked.</param>
        </member>
        <member name="M:Arch.Core.World.Destroy(Arch.Core.QueryDescription@)">
            <summary>
                An efficient method to destroy all <see cref="T:Arch.Core.Entity"/>s matching a <see cref="T:Arch.Core.QueryDescription"/>.
                No <see cref="T:Arch.Core.Entity"/>s are recopied which is much faster.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>'s will be destroyed.</param>
        </member>
        <member name="M:Arch.Core.World.Set``1(Arch.Core.QueryDescription@,``0@)">
            <summary>
                An efficient method to set one component for all <see cref="T:Arch.Core.Entity"/>s matching a <see cref="T:Arch.Core.QueryDescription"/>.
                No <see cref="T:Arch.Core.Entity"/> lookups which makes it as fast as a inlin query.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>s will be targeted.</param>
        </member>
        <member name="M:Arch.Core.World.Add``1(Arch.Core.QueryDescription@,``0@)">
            <summary>
                An efficient method to add one component to all <see cref="T:Arch.Core.Entity"/>s matching a <see cref="T:Arch.Core.QueryDescription"/>.
                No <see cref="T:Arch.Core.Entity"/>s are recopied which is much faster.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>s will be targeted.</param>
        </member>
        <member name="M:Arch.Core.World.Remove``1(Arch.Core.QueryDescription@)">
            <summary>
                An efficient method to remove one component from <see cref="T:Arch.Core.Entity"/>s matching a <see cref="T:Arch.Core.QueryDescription"/>.
                No <see cref="T:Arch.Core.Entity"/>s are recopied which is much faster.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which <see cref="T:Arch.Core.Entity"/>s will be targeted.</param>
        </member>
        <member name="M:Arch.Core.World.Set``1(Arch.Core.Entity,``0@)">
            <summary>
                Sets or replaces a component for an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="cmp">The instance, optional.</param>
        </member>
        <member name="M:Arch.Core.World.Has``1(Arch.Core.Entity)">
            <summary>
                Checks if an <see cref="T:Arch.Core.Entity"/> has a certain component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if it has the desired component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.Get``1(Arch.Core.Entity)">
            <summary>
                Returns a reference to the component of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.World.TryGet``1(Arch.Core.Entity,``0@)">
            <summary>
                Trys to return a reference to the component of an <see cref="T:Arch.Core.Entity"/>.
                Will copy the component if its a struct.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="component">The found component.</param>
            <returns>True if it exists, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.TryGetRef``1(Arch.Core.Entity,System.Boolean@)">
            <summary>
                Trys to return a reference to the component of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="exists">True if it exists, oterhwhise false.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.World.AddOrGet``1(Arch.Core.Entity,``0)">
            <summary>
                Ensures the existence of an component on an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="cmp">The component value used if its being added.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.World.Add``1(Arch.Core.Entity,Arch.Core.Archetype@,Arch.Core.Slot@)">
            <summary>
                Adds an new component to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="newArchetype">The entity's new <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="slot">The new <see cref="T:Arch.Core.Slot"/> where the moved <see cref="T:Arch.Core.Entity"/> landed in.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.Add``1(Arch.Core.Entity)">
            <summary>
                Adds an new component to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Arch.Core.World.Add``1(Arch.Core.Entity,``0@)">
            <summary>
                Adds an new component to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <typeparam name="T">The component type.</typeparam>
            <param name="cmp">The component instance.</param>
        </member>
        <member name="M:Arch.Core.World.Remove``1(Arch.Core.Entity)">
            <summary>
                Removes an component from an <see cref="T:Arch.Core.Entity"/> and moves it to a different <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.World.Set(Arch.Core.Entity,System.Object)">
            <summary>
                Sets or replaces a component for an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="cmp">The component.</param>
        </member>
        <member name="M:Arch.Core.World.SetRange(Arch.Core.Entity,System.Span{System.Object})">
            <summary>
                Sets or replaces a <see cref="T:System.Span`1"/> of components for an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="components">The components <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:Arch.Core.World.Has(Arch.Core.Entity,Arch.Core.Utils.ComponentType)">
            <summary>
                Checks if an <see cref="T:Arch.Core.Entity"/> has a certain component.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="type">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>True if it has the desired component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.HasRange(Arch.Core.Entity,System.Span{Arch.Core.Utils.ComponentType})">
            <summary>
                Checks if an <see cref="T:Arch.Core.Entity"/> has a certain component.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>True if it has the desired component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.Get(Arch.Core.Entity,Arch.Core.Utils.ComponentType)">
            <summary>
                Returns a reference to the component of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="type">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.World.GetRange(Arch.Core.Entity,System.Span{Arch.Core.Utils.ComponentType})">
            <summary>
                Returns an array of components of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/> as a <see cref="T:System.Span`1"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.World.GetRange(Arch.Core.Entity,System.Span{Arch.Core.Utils.ComponentType},System.Span{System.Object})">
            <summary>
                Returns an array of components of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <param name="components">A <see cref="T:System.Span`1"/> where the components are put it.</param>
        </member>
        <member name="M:Arch.Core.World.TryGet(Arch.Core.Entity,Arch.Core.Utils.ComponentType,System.Object@)">
            <summary>
                Trys to return a reference to the component of an <see cref="T:Arch.Core.Entity"/>.
                Will copy the component if its a struct.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="type">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <param name="component">The found component.</param>
            <returns>True if it exists, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.Add(Arch.Core.Entity,System.Object@)">
            <summary>
                Adds an new component to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="cmp">The component.</param>
        </member>
        <member name="M:Arch.Core.World.AddRange(Arch.Core.Entity,System.Span{System.Object})">
            <summary>
                Adds a <see cref="T:System.Collections.Generic.IList`1"/> of new components to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="components">The component <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:Arch.Core.World.Remove(Arch.Core.Entity,Arch.Core.Utils.ComponentType)">
            <summary>
                Removes one single of <see cref="T:Arch.Core.Utils.ComponentType"/>'s from the <see cref="T:Arch.Core.Entity"/> and moves it to a different <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="type">The <see cref="T:Arch.Core.Utils.ComponentType"/> to remove from the the <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.World.RemoveRange(Arch.Core.Entity,System.Span{Arch.Core.Utils.ComponentType})">
            <summary>
                Removes a list of <see cref="T:Arch.Core.Utils.ComponentType"/>'s from the <see cref="T:Arch.Core.Entity"/> and moves it to a different <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">A <see cref="T:System.Span`1"/> of <see cref="T:Arch.Core.Utils.ComponentType"/>'s, those are removed from the <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.World.IsAlive(Arch.Core.Entity)">
            <summary>
                Checks if the <see cref="T:Arch.Core.Entity"/> is alive in this <see cref="T:Arch.Core.World"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if it exists and is alive, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.World.Version(Arch.Core.Entity)">
            <summary>
                Returns the version of an <see cref="T:Arch.Core.Entity"/>.
                Indicating how often it was recycled.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>Its version.</returns>
        </member>
        <member name="M:Arch.Core.World.Reference(Arch.Core.Entity)">
            <summary>
                Returns a <see cref="T:Arch.Core.EntityReference"/> to an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>Its <see cref="T:Arch.Core.EntityReference"/>.</returns>
        </member>
        <member name="M:Arch.Core.World.GetArchetype(Arch.Core.Entity)">
            <summary>
                Returns the <see cref="T:Arch.Core.Archetype"/> of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>Its <see cref="T:Arch.Core.Archetype"/>.</returns>
        </member>
        <member name="M:Arch.Core.World.GetChunk(Arch.Core.Entity)">
            <summary>
                Returns the <see cref="T:Arch.Core.Chunk"/> of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>A reference to its <see cref="T:Arch.Core.Chunk"/>.</returns>
        </member>
        <member name="M:Arch.Core.World.GetComponentTypes(Arch.Core.Entity)">
            <summary>
                Returns all <see cref="T:Arch.Core.Utils.ComponentType"/>'s of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>Its <see cref="T:Arch.Core.Utils.ComponentType"/>'s array.</returns>
        </member>
        <member name="M:Arch.Core.World.GetAllComponents(Arch.Core.Entity)">
            <summary>
                Returns all components of an <see cref="T:Arch.Core.Entity"/> as an array.
                Will allocate memory.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>A newly allocated array containing the entities components.</returns>
        </member>
        <member name="T:Arch.Core.Entity">
            <summary>
                The <see cref="T:Arch.Core.Entity"/> struct
                represents a general-purpose object and can be assigned a set of components that act as data.
            </summary>
        </member>
        <member name="F:Arch.Core.Entity.Id">
            <summary>
                Its Id, unique in its <see cref="T:Arch.Core.World"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.Entity.Null">
            <summary>
                A null entity, used for comparison.
            </summary>
        </member>
        <member name="M:Arch.Core.Entity.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Entity"/> struct.
            </summary>
            <param name="id">Its unique id.</param>
            <param name="worldId">Its world id, not used for this entity since its pure ecs.</param>
        </member>
        <member name="M:Arch.Core.Entity.Equals(Arch.Core.Entity)">
            <summary>
                Checks the <see cref="T:Arch.Core.Entity"/> for equality with another one.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Entity.Equals(System.Object)">
            <summary>
                Checks the <see cref="T:Arch.Core.Entity"/> for equality with another object..
            </summary>
            <param name="obj">The other <see cref="T:Arch.Core.Entity"/> object.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Entity.GetHashCode">
            <summary>
                Calculates the hash of this <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <returns>Its hash.</returns>
        </member>
        <member name="M:Arch.Core.Entity.op_Equality(Arch.Core.Entity,Arch.Core.Entity)">
            <summary>
                Checks the left <see cref="T:Arch.Core.Entity"/> for equality with the right one.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if both are equal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Entity.op_Inequality(Arch.Core.Entity,Arch.Core.Entity)">
            <summary>
                Checks the left <see cref="T:Arch.Core.Entity"/> for unequality with the right one.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.Entity"/>.</param>
            <returns>True if both are unequal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Entity.ToString">
            <summary>
                Converts this entity to a string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Arch.Core.EntityReference">
            <summary>
                The <see cref="T:Arch.Core.EntityReference"/> struct
                represents a reference to an <see cref="F:Arch.Core.EntityReference.Entity"/> and its Version.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityReference.Entity">
            <summary>
                The referenced <see cref="F:Arch.Core.EntityReference.Entity"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityReference.Version">
            <summary>
                Its version.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityReference.Null">
            <summary>
                A null reference.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityReference.#ctor(Arch.Core.Entity@,System.Int32@)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityReference"/> struct.
            </summary>
            <param name="entity">The referenced <see cref="F:Arch.Core.EntityReference.Entity"/>.</param>
            <param name="version">Its version.</param>
        </member>
        <member name="M:Arch.Core.EntityReference.#ctor">
            <summary>
                Initializes a new null instance of the <see cref="T:Arch.Core.EntityReference"/> struct.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityReference.IsAlive(Arch.Core.World)">
            <summary>
                Checks if the referenced <see cref="F:Arch.Core.EntityReference.Entity"/> is still valid and alife.
            </summary>
            <param name="world">The <see cref="F:Arch.Core.EntityReference.Entity"/> <see cref="T:Arch.Core.World"/>..</param>
            <returns>True if its alive, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.Equals(Arch.Core.EntityReference)">
            <summary>
                Checks the <see cref="T:Arch.Core.EntityReference"/> for equality with another one.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.EntityReference"/>.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.Equals(System.Object)">
            <summary>
                Checks the <see cref="T:Arch.Core.EntityReference"/> for equality with another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The other <see cref="T:Arch.Core.EntityReference"/> object.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.GetHashCode">
            <summary>
                Calculates the hash of this <see cref="F:Arch.Core.EntityReference.Entity"/>.
            </summary>
            <returns>Its hash.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.op_Equality(Arch.Core.EntityReference,Arch.Core.EntityReference)">
            <summary>
                 Checks the <see cref="T:Arch.Core.EntityReference"/> for equality with another one.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.EntityReference"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.EntityReference"/>.</param>
            <returns>True if equal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.op_Inequality(Arch.Core.EntityReference,Arch.Core.EntityReference)">
            <summary>
                 Checks the <see cref="T:Arch.Core.EntityReference"/> for inequality with another one.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.EntityReference"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.EntityReference"/>.</param>
            <returns>True if inequal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.EntityReference.op_Implicit(Arch.Core.EntityReference)~Arch.Core.Entity">
            <summary>
                Implicitly converts an <see cref="T:Arch.Core.EntityReference"/> into the
                <see cref="F:Arch.Core.EntityReference.Entity"/> that it is referencing.
            </summary>
            <param name="reference">The <see cref="T:Arch.Core.EntityReference"/> to convert.</param>
            <returns>
                The <see cref="F:Arch.Core.EntityReference.Entity"/> referenced by this <see cref="T:Arch.Core.EntityReference"/>.
            </returns>
        </member>
        <member name="M:Arch.Core.EntityReference.ToString">
            <summary>
                Converts this <see cref="T:Arch.Core.EntityReference"/> to a string.
            </summary>
            <returns>Its string.</returns>
        </member>
        <member name="T:Arch.Core.EntityInfo">
            <summary>
                The <see cref="T:Arch.Core.EntityInfo"/> struct
                stores information about an <see cref="T:Arch.Core.Entity"/> to quickly access its data and location.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityInfo.Archetype">
            <summary>
                A reference to its <see cref="F:Arch.Core.EntityInfo.Archetype"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityInfo.Slot">
            <summary>
                A reference to its <see cref="F:Arch.Core.EntityInfo.Slot"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.EntityInfo.Version">
            <summary>
                A reference to its version.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityInfo.#ctor(Arch.Core.Archetype,Arch.Core.Slot,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityInfo"/> struct.
            </summary>
            <param name="archetype">Its <see cref="F:Arch.Core.EntityInfo.Archetype"/>.</param>
            <param name="slot">Its <see cref="F:Arch.Core.EntityInfo.Slot"/>.</param>
            <param name="version">Its version.</param>
        </member>
        <member name="T:Arch.Core.EntitySlot">
            <summary>
                The <see cref="T:Arch.Core.EntityInfo"/> struct
                stores information about an <see cref="T:Arch.Core.Entity"/> to quickly access its data and location.
            </summary>
        </member>
        <member name="F:Arch.Core.EntitySlot.Archetype">
            <summary>
                A reference to its <see cref="F:Arch.Core.EntitySlot.Archetype"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.EntitySlot.Slot">
            <summary>
                A reference to its <see cref="F:Arch.Core.EntitySlot.Slot"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.EntitySlot.#ctor(Arch.Core.Archetype@,Arch.Core.Slot@)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityInfo"/> struct.
            </summary>
            <param name="archetype">Its <see cref="F:Arch.Core.EntitySlot.Archetype"/>.</param>
            <param name="slot">Its <see cref="F:Arch.Core.EntitySlot.Slot"/>.</param>
        </member>
        <member name="T:Arch.Core.EntityInfoStorage">
            <summary>
                The <see cref="T:Arch.Core.EntityInfoStorage"/> class
                acts as an API and Manager to acess all <see cref="T:Arch.Core.Entity"/> meta data and informations like its version, its <see cref="T:Arch.Core.Archetype"/> or the <see cref="T:Arch.Core.Chunk"/> it is in.
            </summary>
        </member>
        <member name="P:Arch.Core.EntityInfoStorage.Versions">
            <summary>
                The <see cref="T:Arch.Core.Entity"/> versions in an jagged array.
            </summary>
        </member>
        <member name="P:Arch.Core.EntityInfoStorage.Archetypes">
            <summary>
                The <see cref="T:Arch.Core.Entity"/> <see cref="T:Arch.Core.Archetype"/>s in an jagged array.
            </summary>
        </member>
        <member name="P:Arch.Core.EntityInfoStorage.Slots">
            <summary>
                The <see cref="T:Arch.Core.Entity"/> <see cref="T:Arch.Core.Slot"/>s in an jagged array.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityInfoStorage"/> class.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Add(System.Int32,System.Int32,Arch.Core.Archetype,Arch.Core.Slot)">
            <summary>
                Adds meta data of an <see cref="T:Arch.Core.Entity"/> to the internal structure.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/> id.</param>
            <param name="version">Its version.</param>
            <param name="archetype">Its <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="slot">Its <see cref="T:Arch.Core.Slot"/>.</param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Has(System.Int32)">
            <summary>
                Checks whether an <see cref="T:Arch.Core.Entity"/>s data exists in this <see cref="T:Arch.Core.EntityInfoStorage"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <returns>True if its data exists in here, false if not.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.GetArchetype(System.Int32)">
            <summary>
                Returns the <see cref="T:Arch.Core.Archetype"/> of an <see cref="T:Arch.Core.Entity"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <returns>Its <see cref="T:Arch.Core.Archetype"/>.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.GetSlot(System.Int32)">
            <summary>
                Returns the <see cref="T:Arch.Core.Slot"/> of an <see cref="T:Arch.Core.Entity"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <returns>Its <see cref="T:Arch.Core.Slot"/>.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.GetVersion(System.Int32)">
            <summary>
                Returns the version of an <see cref="T:Arch.Core.Entity"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <returns>Its <see cref="T:Arch.Core.Slot"/>.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.TryGetVersion(System.Int32,System.Int32@)">
            <summary>
                Trys to return the version of an <see cref="T:Arch.Core.Entity"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <param name="version">The <see cref="T:Arch.Core.Entity"/>s version.</param>
            <returns>True if it exists, false if not.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.GetEntitySlot(System.Int32)">
            <summary>
                Returns the <see cref="T:Arch.Core.EntitySlot"/> of an <see cref="T:Arch.Core.Entity"/> by its id.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
            <returns>Its <see cref="T:Arch.Core.EntitySlot"/>.</returns>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Remove(System.Int32)">
            <summary>
                Removes an enlisted <see cref="T:Arch.Core.Entity"/> from this <see cref="T:Arch.Core.EntityInfoStorage"/>.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/>s id.</param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Move(System.Int32,Arch.Core.Slot)">
            <summary>
                Moves an <see cref="T:Arch.Core.Entity"/> to a new <see cref="T:Arch.Core.Slot"/>, updates that reference.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/> id.</param>
            <param name="slot">Its new <see cref="T:Arch.Core.Slot"/>.</param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Move(System.Int32,Arch.Core.Archetype,Arch.Core.Slot)">
            <summary>
                Moves an <see cref="T:Arch.Core.Entity"/> to a new <see cref="T:Arch.Core.Archetype"/> and a new <see cref="T:Arch.Core.Slot"/>, updates that reference.
            </summary>
            <param name="id">The <see cref="T:Arch.Core.Entity"/> id.</param>
            <param name="archetype">Its new <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="slot">Its new <see cref="T:Arch.Core.Slot"/>.</param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Shift(Arch.Core.Archetype,Arch.Core.Slot,Arch.Core.Archetype,Arch.Core.Slot)">
            TODO : Find a cleaner way to break? One that does NOT require a branching?
            <summary>
                Updates the <see cref="T:Arch.Core.EntityInfo"/> and all entities that moved/shifted between the archetypes.
                <remarks>Use and modify with caution, one small logical issue and the whole framework stops working.</remarks>
            </summary>
            <param name="archetype">The old <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="archetypeSlot">The old <see cref="T:Arch.Core.Slot"/> where the shift operation started.</param>
            <param name="newArchetype">The new <see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="newArchetypeSlot">The new <see cref="T:Arch.Core.Slot"/> where the entities were shifted to.</param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.EnsureCapacity(System.Int32)">
            <summary>
                Ensures the capacity of the underlaying arrays and resizes them properly.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.TrimExcess">
            <summary>
                Trims the <see cref="T:Arch.Core.EntityInfoStorage"/> and all of its underlaying arrays.
                Releases memory.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityInfoStorage.Clear">
            <summary>
                Clears the <see cref="T:Arch.Core.EntityInfoStorage"/> and all of its underlaying arrays.
            </summary>
        </member>
        <member name="P:Arch.Core.EntityInfoStorage.Item(System.Int32)">
            <summary>
                Returns a <see cref="T:Arch.Core.EntityInfo"/> at an given index.
            </summary>
            <param name="id">The index.</param>
        </member>
        <member name="T:Arch.Core.JaggedArray`1">
            <summary>
                The <see cref="T:Arch.Core.JaggedArray`1"/> class
                represents an jagged array that stores <see cref="T:Arch.Core.EntityInfo"/> for quickly acessing it.
            </summary>
        </member>
        <member name="F:Arch.Core.JaggedArray`1._chunkSize">
            <summary>
                How large a chunk should be. This value will be a power of 2.
            </summary>
        </member>
        <member name="F:Arch.Core.JaggedArray`1._entityInfos">
            <summary>
                The jagged array storing the <see cref="T:Arch.Core.EntityInfo"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.JaggedArray`1.filler">
            <summary>
                The fill value for new initialized arrays.
            </summary>
        </member>
        <member name="F:Arch.Core.JaggedArray`1._largestId">
            <summary>
                The currently largest id inside this <see cref="T:Arch.Core.JaggedArray`1"/>, for trimming purposes.
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.#cctor">
            <summary>
                Initializes the static values of <see cref="T:Arch.Core.JaggedArray`1"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.JaggedArray`1"/> class.
            <param name="filler">A default value which all slots will be filled with.</param>
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.#ctor(System.Int32,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.JaggedArray`1"/> class.
            </summary>
            <param name="filler">A default value which all slots will be filled with.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.Add(System.Int32,`0)">
            <summary>
                Adds a new <see cref="T:Arch.Core.EntityInfo"/> to a given index.
            </summary>
            <param name="id">The index.</param>
            <param name="entityInfo">The <see cref="T:Arch.Core.EntityInfo"/>.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.Remove(System.Int32)">
            <summary>
                Removes an <see cref="T:Arch.Core.EntityInfo"/> from a given index.
                Replaces its value with the default one.
            </summary>
            <param name="id">The index.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.TryGetValue(System.Int32,`0@)">
            <summary>
                Trys to return an <see cref="T:Arch.Core.EntityInfo"/> from its index, if its set.
            </summary>
            <param name="id">The index.</param>
            <param name="entityInfo">The <see cref="T:Arch.Core.EntityInfo"/>.</param>
            <returns>True if it was set, false if not.</returns>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.IdToSlot(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Converts the passed id to its inner and outer index ( or slot ) inside the <see cref="F:Arch.Core.JaggedArray`1._entityInfos"/> array.
            </summary>
            <param name="id">The id.</param>
            <param name="outerIndex">The outer index.</param>
            <param name="innerIndex">The inner index.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.EnsureCapacity(System.Int32)">
            <summary>
                Ensures the capacity of this <see cref="!:JaggedArray"/> and resizes it correctly.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.TrimExcess">
            <summary>
                Trims this <see cref="!:JaggedArray"/> and releases unused resources.
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.Clear">
            <summary>
                Clears this <see cref="!:JaggedArray"/> and sets all values to the default one.
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.UpdateLargestId">
            <summary>
                Updates the largest id.
            </summary>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.ArrayContainsNonDefaultValues(`0[])">
            <summary>
                Checks if the passed <see cref="T:Arch.Core.EntityInfo"/> array contains set values.
            </summary>
            <param name="array">The <see cref="T:Arch.Core.EntityInfo"/> array to check.</param>
            <returns></returns>
        </member>
        <member name="P:Arch.Core.JaggedArray`1.Item(System.Int32)">
            <summary>
                Returns a reference to a <see cref="T:Arch.Core.EntityInfo"/> at an given index.
            </summary>
            <param name="id">The index.</param>
        </member>
        <member name="M:Arch.Core.JaggedArray`1.op_Explicit(Arch.Core.JaggedArray{`0})~`0[][]">
            <summary>
                A explicit operator converting a <see cref="T:Arch.Core.JaggedArray`1"/> intance to its underlaying T[][] array.
            </summary>
            <param name="jaggedArray">The <see cref="T:Arch.Core.JaggedArray`1"/> instance.</param>
            <returns>The underlaying T[][] array. </returns>
        </member>
        <member name="T:Arch.Core.Enumerator`1">
            <summary>
                The <see cref="T:Arch.Core.Enumerator`1"/> struct
                represents a backward enumerator with which one can iterate over all items of an array or span.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="M:Arch.Core.Enumerator`1.#ctor(System.Span{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Enumerator`1"/> struct.
            </summary>
            <param name="span">The <see cref="T:System.Span`1"/> with items to iterate over.</param>
        </member>
        <member name="M:Arch.Core.Enumerator`1.#ctor(System.Span{`0},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Enumerator`1"/> struct.
            </summary>
            <param name="span">The <see cref="T:System.Span`1"/> with items to iterate over.</param>
            <param name="length">Its length or size.</param>
        </member>
        <member name="M:Arch.Core.Enumerator`1.MoveNext">
            <summary>
                Moves to the next item.
            </summary>
            <returns>True if there still items, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Enumerator`1.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.Enumerator`1.Current">
            <summary>
                Returns a reference to the current item.
            </summary>
        </member>
        <member name="T:Arch.Core.QueryArchetypeEnumerator">
            <summary>
                The <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> struct
                represents an enumerator with which one can iterate over all <see cref="T:Arch.Core.Archetype"/>'s that matches the given <see cref="T:Arch.Core.Query"/>.
                <remarks>
                    Uses unsafe code and references internally to allow code to inline. Spans in enumerators are not inlined.
                </remarks>
            </summary>
        </member>
        <member name="M:Arch.Core.QueryArchetypeEnumerator.#ctor(Arch.Core.Query,System.Span{Arch.Core.Archetype})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> struct.
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> which contains a description and tells which <see cref="T:Arch.Core.Archetype"/>'s fit.</param>
            <param name="archetypes">A <see cref="T:System.Span`1"/> of <see cref="T:Arch.Core.Archetype"/>'s which are checked using the <see cref="T:Arch.Core.Query"/>.</param>
        </member>
        <member name="M:Arch.Core.QueryArchetypeEnumerator.MoveNext">
            <summary>
                Moves to the next <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <returns>True if theres a next <see cref="T:Arch.Core.Archetype"/>, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.QueryArchetypeEnumerator.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.QueryArchetypeEnumerator.Current">
            <summary>
                Returns a reference to the current <see cref="T:Arch.Core.Archetype"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.QueryArchetypeIterator">
            <summary>
                The <see cref="T:Arch.Core.QueryArchetypeIterator"/> struct
                represents an iterator wich wraps the <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> for using it in foreach loops.
            </summary>
        </member>
        <member name="M:Arch.Core.QueryArchetypeIterator.#ctor(Arch.Core.Query,System.Span{Arch.Core.Archetype})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryArchetypeIterator"/> struct.
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> each <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> will use.</param>
            <param name="archetypes">The <see cref="T:Arch.Core.Archetype"/>'s each <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> will use.</param>
        </member>
        <member name="M:Arch.Core.QueryArchetypeIterator.GetEnumerator">
            <summary>
                Creates a new instance of <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> with the given <see cref="F:Arch.Core.QueryArchetypeIterator._query"/> and <see cref="F:Arch.Core.QueryArchetypeIterator._archetypes"/>.
            </summary>
            <returns>The new <see cref="T:Arch.Core.QueryArchetypeEnumerator"/> instance.</returns>
        </member>
        <member name="T:Arch.Core.QueryChunkEnumerator">
            <summary>
                The <see cref="T:Arch.Core.QueryChunkEnumerator"/> struct
                represents an enumerator with which one can iterate over all non empty <see cref="T:Arch.Core.Chunk"/>'s that matches the given <see cref="T:Arch.Core.Query"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.QueryChunkEnumerator.#ctor(Arch.Core.Query,System.Span{Arch.Core.Archetype})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryChunkEnumerator"/> struct.
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> which contains a description and tells which <see cref="T:Arch.Core.Chunk"/>'s fit.</param>
            <param name="archetypes">A <see cref="T:System.Span`1"/> of <see cref="T:Arch.Core.Archetype"/>'s which <see cref="T:Arch.Core.Chunk"/>'s are checked using the <see cref="T:Arch.Core.Query"/>.</param>
        </member>
        <member name="M:Arch.Core.QueryChunkEnumerator.MoveNext">
            <summary>
                Moves to the next <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <returns>True if theres a next <see cref="T:Arch.Core.Chunk"/>, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.QueryChunkEnumerator.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.QueryChunkEnumerator.Current">
            <summary>
                Returns a reference to the current <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.QueryChunkIterator">
            <summary>
                The <see cref="T:Arch.Core.QueryChunkIterator"/> struct
                represents an iterator wich wraps the <see cref="T:Arch.Core.QueryChunkEnumerator"/> for using it in foreach loops.
            </summary>
        </member>
        <member name="M:Arch.Core.QueryChunkIterator.#ctor(Arch.Core.Query,System.Span{Arch.Core.Archetype})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryChunkIterator"/> struct
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> each <see cref="T:Arch.Core.QueryChunkEnumerator"/> will use.</param>
            <param name="archetypes">The <see cref="T:Arch.Core.Archetype"/>'s each <see cref="T:Arch.Core.QueryChunkEnumerator"/> will use.</param>
        </member>
        <member name="M:Arch.Core.QueryChunkIterator.GetEnumerator">
            <summary>
                Creates a new instance of <see cref="T:Arch.Core.QueryChunkEnumerator"/> with the given <see cref="F:Arch.Core.QueryChunkIterator._query"/> and <see cref="F:Arch.Core.QueryChunkIterator._archetypes"/>.
            </summary>
            <returns>The new <see cref="T:Arch.Core.QueryChunkEnumerator"/> instance.</returns>
        </member>
        <member name="T:Arch.Core.ChunkRangeEnumerator">
            <summary>
                The <see cref="T:Arch.Core.QueryChunkEnumerator"/> struct
                represents an enumerator with which one can iterate over all non empty <see cref="T:Arch.Core.Chunk"/>'s that matches the given <see cref="T:Arch.Core.Query"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.ChunkRangeEnumerator.#ctor(Arch.Core.Archetype,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryChunkEnumerator"/> struct.
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> which contains a description and tells which <see cref="T:Arch.Core.Chunk"/>'s fit.</param>
            <param name="archetypes">A <see cref="T:System.Span`1"/> of <see cref="T:Arch.Core.Archetype"/>'s which <see cref="T:Arch.Core.Chunk"/>'s are checked using the <see cref="T:Arch.Core.Query"/>.</param>
        </member>
        <member name="M:Arch.Core.ChunkRangeEnumerator.MoveNext">
            <summary>
                Moves to the next <see cref="T:Arch.Core.Chunk"/>.
            </summary>
            <returns>True if theres a next <see cref="T:Arch.Core.Chunk"/>, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.ChunkRangeEnumerator.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.ChunkRangeEnumerator.Current">
            <summary>
                Returns a reference to the current <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.ChunkRangeIterator">
            <summary>
                The <see cref="T:Arch.Core.QueryChunkIterator"/> struct
                represents an iterator wich wraps the <see cref="T:Arch.Core.QueryChunkEnumerator"/> for using it in foreach loops.
            </summary>
        </member>
        <member name="M:Arch.Core.ChunkRangeIterator.#ctor(Arch.Core.Archetype,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryChunkIterator"/> struct
            </summary>
            <param name="query">The <see cref="T:Arch.Core.Query"/> each <see cref="T:Arch.Core.QueryChunkEnumerator"/> will use.</param>
            <param name="archetypes">The <see cref="T:Arch.Core.Archetype"/>'s each <see cref="T:Arch.Core.QueryChunkEnumerator"/> will use.</param>
        </member>
        <member name="M:Arch.Core.ChunkRangeIterator.GetEnumerator">
            <summary>
                Creates a new instance of <see cref="T:Arch.Core.QueryChunkEnumerator"/> with the given <see cref="!:_query"/> and <see cref="!:_archetypes"/>.
            </summary>
            <returns>The new <see cref="T:Arch.Core.QueryChunkEnumerator"/> instance.</returns>
        </member>
        <member name="T:Arch.Core.EntityEnumerator">
            <summary>
                The <see cref="T:Arch.Core.EntityEnumerator"/> struct
                represents an enumerator with which one can iterate over all <see cref="T:Arch.Core.Entity"/>'s in a given <see cref="T:Arch.Core.Chunk"/>.
                Each <see cref="T:Arch.Core.Entity"/> is represented by its index inside the <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityEnumerator.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityEnumerator"/> struct.
            </summary>
            <param name="length">The length/number of all <see cref="T:Arch.Core.Entity"/>'s in the given <see cref="T:Arch.Core.Chunk"/>.</param>
        </member>
        <member name="M:Arch.Core.EntityEnumerator.MoveNext">
            <summary>
                Moves to the next <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <returns>True if theres a next <see cref="T:Arch.Core.Entity"/>, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.EntityEnumerator.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:Arch.Core.EntityEnumerator.Current">
            <summary>
                Returns a reference to the current <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.EntityIterator">
            <summary>
                The <see cref="T:Arch.Core.EntityIterator"/> struct
                represents an iterator wich iterates over all <see cref="T:Arch.Core.Entity"/>'s within a <see cref="T:Arch.Core.Chunk"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.EntityIterator.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.EntityIterator"/> struct
            </summary>
            <param name="length">The length/number of all <see cref="T:Arch.Core.Entity"/>'s in the given <see cref="T:Arch.Core.Chunk"/>.</param>
        </member>
        <member name="M:Arch.Core.EntityIterator.GetEnumerator">
            <summary>
                Creates a new instance of <see cref="T:Arch.Core.EntityEnumerator"/>.
            </summary>
            <returns>The new <see cref="T:Arch.Core.EntityEnumerator"/> instance.</returns>
        </member>
        <member name="T:Arch.Core.RangeEnumerator">
            <summary>
                The <see cref="T:Arch.Core.RangeEnumerator"/> struct
                is sed to iterate over sections of a range to split them into pieces.
                Mostly used to partition arrays.
            </summary>
        </member>
        <member name="M:Arch.Core.RangeEnumerator.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.RangeEnumerator"/> struct.
            </summary>
            <param name="threads">The amount of threads being used.</param>
            <param name="size">The total size of the array.</param>
        </member>
        <member name="M:Arch.Core.RangeEnumerator.AmountForJob(System.Int32)">
            <summary>
                Calculates the amount for a job.
            </summary>
            <param name="i">Its index, basically the number of the job.</param>
            <returns>Its amount.</returns>
        </member>
        <member name="M:Arch.Core.RangeEnumerator.MoveNext">
            <summary>
                Moves next.
            </summary>
            <returns>True if its still in the range, false if not.</returns>
        </member>
        <member name="M:Arch.Core.RangeEnumerator.Reset">
            <summary>
                Resets the instance.
            </summary>
        </member>
        <member name="P:Arch.Core.RangeEnumerator.Current">
            <summary>
                Returns the current range.
            </summary>
        </member>
        <member name="T:Arch.Core.RangePartitioner">
            <summary>
                The <see cref="T:Arch.Core.RangePartitioner"/> struct
                represents an iterator wich wraps the <see cref="T:Arch.Core.RangeEnumerator"/> for using it in foreach loops.
            </summary>
        </member>
        <member name="M:Arch.Core.RangePartitioner.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.RangePartitioner"/> struct
            </summary>
            <param name="threads">The amount of threads.</param>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Arch.Core.RangePartitioner.GetEnumerator">
            <summary>
                Returns a new instance of a <see cref="T:Arch.Core.RangeEnumerator"/>.
            </summary>
            <returns>A new <see cref="T:Arch.Core.RangeEnumerator"/>.</returns>
        </member>
        <member name="T:Arch.Core.Events.EntityCreatedHandler">
            <summary>
                A delegate called once a new <see cref="T:Arch.Core.Entity"/> was created.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.EntityDestroyedHandler">
            <summary>
                A delegate called once a <see cref="T:Arch.Core.Entity"/> was destroyed.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.ComponentAddedHandler`1">
            <summary>
                A delegate called once a componnet was added for a specific <see cref="T:Arch.Core.Entity"/>.
            <typeparam name="T">The generic component.</typeparam>
            </summary>
        </member>
        <member name="T:Arch.Core.Events.ComponentSetHandler`1">
            <summary>
                A delegate called once a component was set for a specific <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <typeparam name="T">The generic component.</typeparam>
        </member>
        <member name="T:Arch.Core.Events.ComponentRemovedHandler`1">
            <summary>
                A delegate called once a component was removed from a specific <see cref="T:Arch.Core.Entity"/>.
            <typeparam name="T">The generic component.</typeparam>
            </summary>
        </member>
        <member name="T:Arch.Core.Events.ComponentAddedHandler">
            <summary>
                A delegate called once a componnet was added for a specific <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.ComponentSetHandler">
            <summary>
                A delegate called once a component was set for a specific <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.ComponentRemovedHandler">
            <summary>
                A delegate called once a component was set for a specific <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.Events">
            <summary>
                The <see cref="T:Arch.Core.Events.Events"/> class
                acts as a storage for all registered event handlers and stores them properly in lists.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.Events`1">
            <summary>
                The <see cref="T:Arch.Core.Events.Events`1"/> class
                acts as a storage for generic events and stores them in specified lists.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Arch.Core.Events.EventTypeRegistry">
            <summary>
                The <see cref="T:Arch.Core.Events.EventTypeRegistry"/> class
                acts as a static class storing and managing the <see cref="T:Arch.Core.Events.EventType`1"/>s.
            </summary>
        </member>
        <member name="F:Arch.Core.Events.EventTypeRegistry.NextEventTypeId">
            <summary>
                The TypeId of the next event.
            </summary>
        </member>
        <member name="F:Arch.Core.Events.EventTypeRegistry.EventIds">
            <summary>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping all EventTypes to their id.
            </summary>
        </member>
        <member name="T:Arch.Core.Events.EventType`1">
            <summary>
                The <see cref="T:Arch.Core.Events.EventType`1"/> class
                acts as a compile time static class to store meta data for an registered event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Arch.Core.Events.EventType`1.Id">
            <summary>
                The Id of this <see cref="T:Arch.Core.Events.EventType`1"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Events.EventType`1.#cctor">
            <summary>
                Creates a new instance of the <see cref="T:Arch.Core.Events.EventType`1"/> class.
            </summary>
        </member>
        <member name="T:Arch.Core.Extensions.Dangerous.DangerousWorldExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Dangerous.DangerousWorldExtensions"/> class
                contains several <see cref="T:Arch.Core.World"/> related extension methods which give acess to underlaying data structures that should only be modified when you exactly know what you are doing.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Dangerous.DangerousWorldExtensions.GetVersions(Arch.Core.World)">
            <summary>
                Returns 
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Core.Extensions.EntityExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.EntityExtensions"/> class
                adds several extension methods for <see cref="T:Arch.Core.Entity"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.Extensions.Internal.ArrayExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Internal.ArrayExtensions"/> class
                adds several extensions methods for arrays and array related types.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ArrayExtensions.Add``1(``0[],``0[])">
            <summary>
                Adds a list of items to an array.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="target">The target array.</param>
            <param name="items">The array of items which will be added.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ArrayExtensions.Add``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
                Adds a list of items to an array.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="target">The target array.</param>
            <param name="items">The <see cref="T:System.Collections.IList"/> of items which will be added.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ArrayExtensions.Remove``1(``0[],``0[])">
            <summary>
                Removes a list of items from an array by value equality.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="array">The target array.</param>
            <param name="toRemove">The <see cref="T:System.Collections.IList"/> of items which will be removed.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ArrayExtensions.GetOrResize``1(``0[]@,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Gets the element at an index in the array, or resizes it to fit an element
                at that index.
            </summary>
            <param name="array">The array to get the element from.</param>
            <param name="index">The index of the element.</param>
            <param name="exists">
                Whether or not the index was within the bounds of the array.
                When false, the array has been resized.
            </param>
            <param name="maxSize">The max size to grow the array to.</param>
            <typeparam name="T">The element type of the array.</typeparam>
            <returns>The element at that index. May be null.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ArrayExtensions.Remove``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
                Removes a list of items from an array by value equality.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="target">The target array.</param>
            <param name="items">The <see cref="T:System.Collections.IList"/> of items which will be removed.</param>
            <returns>The new array.</returns>
        </member>
        <member name="T:Arch.Core.Extensions.Internal.BitSetExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Internal.BitSetExtensions"/> class
                adds several extension methods to the <see cref="T:Arch.Core.Utils.BitSet"/> class.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.BitSetExtensions.ToBitSet(Arch.Core.Utils.ComponentType[])">
            <summary>
                Converts an array of <see cref="T:Arch.Core.Utils.ComponentType"/>'s to its <see cref="T:Arch.Core.Utils.BitSet"/>.
            </summary>
            <param name="types">The array of <see cref="T:Arch.Core.Utils.ComponentType"/>'s.</param>
            <returns>Their newly created <see cref="T:Arch.Core.Utils.BitSet"/>.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.BitSetExtensions.SetBits(Arch.Core.Utils.BitSet,Arch.Core.Utils.ComponentType[])">
            <summary>
                Sets bits in a <see cref="T:Arch.Core.Utils.BitSet"/> from the <see cref="T:Arch.Core.Utils.ComponentType"/> ids.
            </summary>
            <param name="bitSet">The <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <param name="types">The <see cref="T:Arch.Core.Utils.ComponentType"/>'s array.</param>
        </member>
        <member name="T:Arch.Core.Extensions.Internal.ComponentTypeExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Internal.ComponentTypeExtensions"/> class
                adds several extension methods for <see cref="T:Arch.Core.Utils.ComponentType"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ComponentTypeExtensions.ToByteSize(Arch.Core.Utils.ComponentType[])">
            <summary>
                Calculates the byte size of all components inside the <see cref="T:Arch.Core.Utils.ComponentType"/> array.
            </summary>
            <param name="types">The <see cref="T:Arch.Core.Utils.ComponentType"/> array.</param>
            <returns>Their combined byte size.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.ComponentTypeExtensions.ToLookupArray(Arch.Core.Utils.ComponentType[])">
            <summary>
                Converts a <see cref="T:Arch.Core.Utils.ComponentType"/> array into a lookup array where each <see cref="T:Arch.Core.Utils.ComponentType"/> Id points towards its index.
            </summary>
            <param name="types">The <see cref="T:Arch.Core.Utils.ComponentType"/> array.</param>
            <returns>The lookup array.</returns>
        </member>
        <member name="T:Arch.Core.Extensions.Internal.JobExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Internal.JobExtensions"/> class
                contains some job related methods.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.JobExtensions.PartionateArray(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Calculates how an array should be partionated based on the threadcount.
                For multithreading.
            </summary>
            <param name="threadCount">The thread count.</param>
            <param name="arraySize">The array size.</param>
            <param name="requiredThreads">The amount of required threads.</param>
            <param name="perThread">How many items per thread should be processed.</param>
        </member>
        <member name="T:Arch.Core.Extensions.Internal.MathExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.Internal.MathExtensions"/>
                contains several methods for math operations.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.Internal.MathExtensions.RoundToPowerOfTwo(System.Int32)">
            <summary>
            This method will round down to the nearest power of 2 number. If the supplied number is a power of 2 it will return it.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:Arch.Core.Extensions.WorldExtensions">
            <summary>
                The <see cref="T:Arch.Core.Extensions.WorldExtensions"/> class
                adds several usefull utility methods to the <see cref="T:Arch.Core.World"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.Reserve(Arch.Core.World,Arch.Core.Utils.ComponentType[],System.Int32)">
            <summary>
                Reserves space for a certain number of <see cref="T:Arch.Core.Entity"/>'s of a given component structure/<see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="types">The component structure/<see cref="T:Arch.Core.Archetype"/>.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.GetEntities(Arch.Core.World,Arch.Core.QueryDescription@,System.Collections.Generic.IList{Arch.Core.Entity})">
            <summary>
                Search all matching <see cref="T:Arch.Core.Entity"/>'s and put them into the given <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components or <see cref="T:Arch.Core.Entity"/>'s are searched for.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> receiving the found <see cref="T:Arch.Core.Entity"/>'s.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.GetArchetypes(Arch.Core.World,Arch.Core.QueryDescription@,System.Collections.Generic.IList{Arch.Core.Archetype})">
            <summary>
                Search all matching <see cref="T:Arch.Core.Archetype"/>'s and put them into the given <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components are searched for.</param>
            <param name="archetypes">The <see cref="T:System.Collections.Generic.IList`1"/> receiving <see cref="T:Arch.Core.Archetype"/>'s containing <see cref="T:Arch.Core.Entity"/>'s with the matching components.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.GetChunks(Arch.Core.World,Arch.Core.QueryDescription@,System.Collections.Generic.IList{Arch.Core.Chunk})">
            <summary>
                Search all matching <see cref="T:Arch.Core.Chunk"/>'s and put them into the given <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="queryDescription">The <see cref="T:Arch.Core.QueryDescription"/> which specifies which components are searched for.</param>
            <param name="chunks">The <see cref="T:System.Collections.Generic.IList`1"/> receiving <see cref="T:Arch.Core.Chunk"/>'s containing <see cref="T:Arch.Core.Entity"/>'s with the matching components.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.SetRange(Arch.Core.World,Arch.Core.Entity,System.Object[])">
            <summary>
                Sets or replaces a <see cref="T:System.Collections.Generic.IList`1"/> of components for an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="components">The components <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.HasRange(Arch.Core.World,Arch.Core.Entity,Arch.Core.Utils.ComponentType[])">
            <summary>
                Checks if an <see cref="T:Arch.Core.Entity"/> has a certain component.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>True if it has the desired component, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.GetRange(Arch.Core.World,Arch.Core.Entity,Arch.Core.Utils.ComponentType[])">
            <summary>
                Returns an array of components of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.GetRange(Arch.Core.World,Arch.Core.Entity,Arch.Core.Utils.ComponentType[],System.Collections.Generic.IList{System.Object})">
            <summary>
                Returns an array of components of an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">The component <see cref="T:Arch.Core.Utils.ComponentType"/>.</param>
            <param name="components">A <see cref="T:System.Collections.Generic.IList`1"/> where the components are put it.</param>
            <returns>A reference to the component.</returns>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.AddRange(Arch.Core.World,Arch.Core.Entity,System.Object[])">
            <summary>
                Adds a <see cref="T:System.Collections.Generic.IList`1"/> of new components to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="components">The component <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.AddRange(Arch.Core.World,Arch.Core.Entity,System.Collections.Generic.IList{Arch.Core.Utils.ComponentType})">
            <summary>
                Adds an list of new components to the <see cref="T:Arch.Core.Entity"/> and moves it to the new <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="components">A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Arch.Core.Utils.ComponentType"/>'s, those are added to the <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.RemoveRange(Arch.Core.World,Arch.Core.Entity,Arch.Core.Utils.ComponentType[])">
            <summary>
                Removes a list of <see cref="T:Arch.Core.Utils.ComponentType"/>'s from the <see cref="T:Arch.Core.Entity"/> and moves it to a different <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Arch.Core.Utils.ComponentType"/>'s, those are removed from the <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="M:Arch.Core.Extensions.WorldExtensions.RemoveRange(Arch.Core.World,Arch.Core.Entity,System.Collections.Generic.IList{Arch.Core.Utils.ComponentType})">
            <summary>
                Removes a list of <see cref="T:Arch.Core.Utils.ComponentType"/>'s from the <see cref="T:Arch.Core.Entity"/> and moves it to a different <see cref="T:Arch.Core.Archetype"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
            <param name="types">A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Arch.Core.Utils.ComponentType"/>'s, those are removed from the <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="T:Arch.Core.DefaultObjectPolicy`1">
            <summary>
                The <see cref="T:Arch.Core.DefaultObjectPolicy`1"/> class is a pool policy that creates and returns any generic object in the same way.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="M:Arch.Core.DefaultObjectPolicy`1.Create">
            <summary>
                Creates an instance of the generic type <see cref="!:T"/>.
            </summary>
            <returns>A new instance of <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Arch.Core.DefaultObjectPolicy`1.Return(`0)">
            <summary>
                Returns an instance of <see cref="!:T"/>;
            </summary>
            <param name="obj">The instance.</param>
            <returns>True if it was returned sucessfully.</returns>
        </member>
        <member name="T:Arch.Core.Range">
            <summary>
                The <see cref="T:Arch.Core.Range"/> struct represents a section of an array.
            </summary>
        </member>
        <member name="M:Arch.Core.Range.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Range"/> struct.
            </summary>
            <param name="start">Its start index.</param>
            <param name="length">Its length, beginning from the start index.</param>
        </member>
        <member name="F:Arch.Core.Range.Start">
            <summary>
                The start index of the array section.
            </summary>
        </member>
        <member name="F:Arch.Core.Range.Length">
            <summary>
                The length, beginning from the <see cref="F:Arch.Core.Range.Start"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.IChunkJob">
            <summary>
                The <see cref="T:Arch.Core.IChunkJob"/> interface
                represents a parallel job which is executed on a <see cref="T:Arch.Core.Chunk"/> to execute logic on its entities.
            </summary>
        </member>
        <member name="T:Arch.Core.ForEachJob">
            <summary>
                The <see cref="T:Arch.Core.ForEachJob"/> struct
                is an <see cref="T:Arch.Core.IChunkJob"/>, executing <see cref="T:Arch.Core.ForEach"/> on each entity.
            </summary>
        </member>
        <member name="F:Arch.Core.ForEachJob.ForEach">
            <summary>
                The <see cref="F:Arch.Core.ForEachJob.ForEach"/> callback invoked for each <see cref="T:Arch.Core.Entity"/>;
            </summary>
        </member>
        <member name="M:Arch.Core.ForEachJob.Execute(System.Int32,Arch.Core.Chunk@)">
            <summary>
                Called on each <see cref="T:Arch.Core.Chunk"/> and iterates over all <see cref="T:Arch.Core.Entity"/>'s to call the <see cref="F:Arch.Core.ForEachJob.ForEach"/> callback for each.
            </summary>
            <param name="index">The chunk index.</param>
            <param name="chunk">A reference to the chunk which is currently processed.</param>
        </member>
        <member name="T:Arch.Core.IForEachJob`1">
            <summary>
                The <see cref="T:Arch.Core.IForEachJob`1"/> struct
                is an <see cref="T:Arch.Core.IChunkJob"/>, executing <see cref="T:Arch.Core.ForEach"/> on each entity.
            </summary>
            <typeparam name="T">The generic type, inhereting from <see cref="T:Arch.Core.IForEach`1"/>.</typeparam>
        </member>
        <member name="F:Arch.Core.IForEachJob`1.ForEach">
            <summary>
            The <see cref="T:Arch.Core.IForEach`1"/> interface reference being invoked.
            </summary>
        </member>
        <member name="M:Arch.Core.IForEachJob`1.Execute(System.Int32,Arch.Core.Chunk@)">
            <summary>
                Called on each <see cref="T:Arch.Core.Chunk"/> and iterates over all <see cref="T:Arch.Core.Entity"/>'s to call the <see cref="F:Arch.Core.IForEachJob`1.ForEach"/> callback for each.
            </summary>
            <param name="index">The chunk index.</param>
            <param name="chunk">A reference to the chunk which is currently processed.</param>
        </member>
        <member name="T:Arch.Core.ChunkIterationJob`1">
            <summary>
                The <see cref="T:Arch.Core.ChunkIterationJob`1"/> class
                is an <see cref="T:JobScheduler.IJob"/> that can be scheduled using the <see cref="N:JobScheduler"/> and the <see cref="T:Arch.Core.World"/> to iterate multithreaded over chunks.
            </summary>
            <typeparam name="T">The generic type that implements the <see cref="T:Arch.Core.IChunkJob"/> interface.</typeparam>
        </member>
        <member name="M:Arch.Core.ChunkIterationJob`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.ChunkIterationJob`1"/> class.
            </summary>
        </member>
        <member name="M:Arch.Core.ChunkIterationJob`1.#ctor(System.Int32,System.Int32,Arch.Core.Chunk[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.ChunkIterationJob`1"/> class.
            </summary>
            <param name="start">The start at which this job begins to process the <see cref="P:Arch.Core.ChunkIterationJob`1.Chunks"/>.</param>
            <param name="size">The size or lengths, how man <see cref="P:Arch.Core.ChunkIterationJob`1.Chunks"/> this job will process.</param>
            <param name="chunks">The <see cref="T:Arch.Core.Chunk"/> array being processed.</param>
        </member>
        <member name="P:Arch.Core.ChunkIterationJob`1.Chunks">
            <summary>
            A <see cref="T:Arch.Core.Chunk"/> array, this will be processed.
            </summary>
        </member>
        <member name="P:Arch.Core.ChunkIterationJob`1.Instance">
            <summary>
            An instance of the generic type <see cref="!:T"/>, being invoked upon each chunk.
            </summary>
        </member>
        <member name="P:Arch.Core.ChunkIterationJob`1.Size">
            <summary>
            From the start how many chunks are processed.
            </summary>
        </member>
        <member name="F:Arch.Core.ChunkIterationJob`1.Start">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="M:Arch.Core.ChunkIterationJob`1.Execute">
            <summary>
                Iterates over all <see cref="P:Arch.Core.ChunkIterationJob`1.Chunks"/> between <see cref="F:Arch.Core.ChunkIterationJob`1.Start"/> and <see cref="P:Arch.Core.ChunkIterationJob`1.Size"/> and calls <see cref="P:Arch.Core.ChunkIterationJob`1.Instance"/>.
            </summary>
        </member>
        <member name="T:Arch.Core.QueryDescription">
            <summary>
                The <see cref="T:Arch.Core.QueryDescription"/> struct
                represents a description of the <see cref="T:Arch.Core.Entity"/>'s or components we want to address by means of a query.
            </summary>
        </member>
        <member name="F:Arch.Core.QueryDescription.All">
            <summary>
                An array of all components that an <see cref="T:Arch.Core.Entity"/> should have mandatory.
            </summary>
        </member>
        <member name="F:Arch.Core.QueryDescription.Any">
            <summary>
                An array of all components of which an <see cref="T:Arch.Core.Entity"/> should have at least one.
            </summary>
        </member>
        <member name="F:Arch.Core.QueryDescription.None">
            <summary>
                An array of all components of which an <see cref="T:Arch.Core.Entity"/> should not have any.
            </summary>
        </member>
        <member name="F:Arch.Core.QueryDescription.Exclusive">
            <summary>
                An array of all components that exactly match the structure of an <see cref="T:Arch.Core.Entity"/>.
                <see cref="T:Arch.Core.Entity"/>'s with more or less components than those defined in the array are not addressed.
            </summary>
        </member>
        <member name="M:Arch.Core.QueryDescription.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.QueryDescription"/> struct.
            </summary>
        </member>
        <member name="M:Arch.Core.QueryDescription.WithAll``1">
            <summary>
                All components that an <see cref="T:Arch.Core.Entity"/> should have mandatory.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <returns>The same <see cref="T:Arch.Core.QueryDescription"/> instance for chained operations.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.WithAny``1">
            <summary>
                All components of which an <see cref="T:Arch.Core.Entity"/> should have at least one.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <returns>The same <see cref="T:Arch.Core.QueryDescription"/> instance for chained operations.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.WithNone``1">
            <summary>
                All components of which an <see cref="T:Arch.Core.Entity"/> should have none.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <returns>The same <see cref="T:Arch.Core.QueryDescription"/> instance for chained operations.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.WithExclusive``1">
            <summary>
                An array of all components that exactly match the structure of an <see cref="T:Arch.Core.Entity"/>.
                <see cref="T:Arch.Core.Entity"/>'s with more or less components than those defined in the array are not addressed.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <returns>The same <see cref="T:Arch.Core.QueryDescription"/> instance for chained operations.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.Equals(Arch.Core.QueryDescription)">
            <summary>
                Checks for indifference, if the internal arrays have equal elements true is returned. Otherwise false.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.QueryDescription"/> to compare with.</param>
            <returns>True if elements of the arrays are equal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.Equals(System.Object)">
            <summary>
                Checks for indifference, if the internal arrays have equal elements true is returned. Otherwise false.
            </summary>
            <param name="obj">The other <see cref="T:System.Object"/> to compare with.</param>
            <returns>True if elements of the arrays are equal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.GetHashCode">
            NOTE: Probably we should use Component.GetHashCode(...) ?
            <summary>
                Calculates the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.op_Equality(Arch.Core.QueryDescription,Arch.Core.QueryDescription)">
            <summary>
                Checks for indifference, if the internal arrays have equal elements true is returned. Otherwise false.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.QueryDescription"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.QueryDescription"/>.</param>
            <returns>True if their internal arrays are equal, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.QueryDescription.op_Inequality(Arch.Core.QueryDescription,Arch.Core.QueryDescription)">
            <summary>
                Checks for difference, if the internal arrays have equal elements false is returned. Otherwise true.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.QueryDescription"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.QueryDescription"/>.</param>
            <returns>True if their internal arrays are unequal, otherwhise false.</returns>
        </member>
        <member name="T:Arch.Core.Query">
            <summary>
                The <see cref="T:Arch.Core.Query"/> struct
                Represents a query which is created based on a <see cref="T:Arch.Core.World"/> and a <see cref="T:Arch.Core.QueryDescription"/>.
                It provides some methods to iterate over all <see cref="T:Arch.Core.Entity"/>'s that match the aspect of the <see cref="T:Arch.Core.QueryDescription"/> that was used to create this instance.
            </summary>
        </member>
        <member name="M:Arch.Core.Query.#ctor(Collections.Pooled.PooledList{Arch.Core.Archetype},Arch.Core.QueryDescription)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Query"/> struct.
            </summary>
            <param name="archetypes">The <see cref="T:Arch.Core.Archetype"/>'s this query iterates over.</param>
            <param name="description">The <see cref="T:Arch.Core.QueryDescription"/> used to target <see cref="T:Arch.Core.Entity"/>'s.</param>
        </member>
        <member name="M:Arch.Core.Query.Valid(Arch.Core.Utils.BitSet)">
            <summary>
                Checks whether the specified <see cref="T:Arch.Core.Utils.BitSet"/> matches.
            </summary>
            <param name="bitset">The <see cref="T:Arch.Core.Utils.BitSet"/> to compare with.</param>
            <returns>True if it matches, otherwhise false.</returns>
        </member>
        <member name="M:Arch.Core.Query.GetArchetypeIterator">
            <summary>
                Returns an iterator to iterate over all <see cref="T:Arch.Core.Archetype"/>'s containing <see cref="T:Arch.Core.Entity"/>'s addressed by this <see cref="T:Arch.Core.Query"/>.
            </summary>
            <returns>A new instance of the <see cref="T:Arch.Core.QueryArchetypeIterator"/>.</returns>
        </member>
        <member name="M:Arch.Core.Query.GetChunkIterator">
            <summary>
                Returns an iterator to iterate over all <see cref="T:Arch.Core.Chunk"/>'s containing <see cref="T:Arch.Core.Entity"/>'s addressed by this <see cref="T:Arch.Core.Query"/>.
            </summary>
            <returns>A new instance of the <see cref="T:Arch.Core.QueryChunkIterator"/>.</returns>
        </member>
        <member name="M:Arch.Core.Query.GetEnumerator">
            <summary>
                Returns an enumerator to iterate over all <see cref="T:Arch.Core.Chunk"/>'s containing <see cref="T:Arch.Core.Entity"/>'s addressed by this <see cref="T:Arch.Core.Query"/>.
            </summary>
            <returns>A new instance of the <see cref="T:Arch.Core.QueryChunkIterator"/>.</returns>
        </member>
        <member name="M:Arch.Core.Query.Equals(Arch.Core.Query)">
            <summary>
                Checks this <see cref="T:Arch.Core.Query"/> for equality with another.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Query"/>.</param>
            <returns>True if they are equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Query.Equals(System.Object)">
            <summary>
                 Checks this <see cref="T:Arch.Core.Query"/> for equality with another object.
            </summary>
            <param name="obj">The other <see cref="T:System.Object"/>.</param>
            <returns>True if they are equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Query.GetHashCode">
            NOTE: Probably we should use Component.GetHashCode(...) ?
            <summary>
                Calculates the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Query.op_Equality(Arch.Core.Query,Arch.Core.Query)">
            <summary>
                Checks for indifference.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.Query"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.Query"/>.</param>
            <returns>True if they are equal, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Query.op_Inequality(Arch.Core.Query,Arch.Core.Query)">
            <summary>
                Checks for difference.
            </summary>
            <param name="left">The left <see cref="T:Arch.Core.Query"/>.</param>
            <param name="right">The right <see cref="T:Arch.Core.Query"/>.</param>
            <returns>True if they are unequal, false if not.</returns>
        </member>
        <member name="F:Arch.Core.Utils.ArrayDictionary`1._array">
            <summary>
                Stores <see cref="!:TValue"/>s with an index smaller than
                <see cref="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize"/>.
                When the index used to access one is equal to or bigger than
                <see cref="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize"/>, <see cref="F:Arch.Core.Utils.ArrayDictionary`1._dictionary"/> is used instead.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ArrayDictionary`1._dictionary">
            <summary>
                Stores <see cref="!:TValue"/>s with an index equal to or bigger than
                <see cref="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize"/>.
                When the index used to access one is smaller than <see cref="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize"/>,
                <see cref="F:Arch.Core.Utils.ArrayDictionary`1._dictionary"/> is used instead.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize">
            <summary>
                The maximum size that <see cref="F:Arch.Core.Utils.ArrayDictionary`1._array"/> will grow to.
                Any elements outside this range are indexed by <see cref="F:Arch.Core.Utils.ArrayDictionary`1._dictionary"/>.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.ArrayDictionary`1.AddOrGet(System.Int32,System.Boolean@)">
            <summary>
                Gets an element in this collection by its index.
                If the index is smaller than <see cref="F:Arch.Core.Utils.ArrayDictionary`1._maxArraySize"/>
                <see cref="F:Arch.Core.Utils.ArrayDictionary`1._array"/> is used, otherwise <see cref="F:Arch.Core.Utils.ArrayDictionary`1._dictionary"/> is used.
            </summary>
            <param name="index">The index of the value to get.</param>
            <param name="exists">Whether or not the value existed in this collection.</param>
            <returns>The value, with a default value if it did not exist.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ArrayDictionary`1.Set(System.Int32,`0@)">
            <summary>
                Sets an element in this collection by <see cref="!:index"/>.
            </summary>
            <param name="index">The index of the <see cref="!:value"/> to set.</param>
            <param name="value">The value to set at <see cref="!:index"/></param>
        </member>
        <member name="T:Arch.Core.Utils.BitSet">
            <summary>
                The <see cref="T:Arch.Core.Utils.BitSet"/> class
                represents a resizable collection of bits.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.RequiredLength(System.Int32)">
            <summary>
                Determines the required length of an <see cref="T:Arch.Core.Utils.BitSet"/> to hold the passed id or bit.
            </summary>
            <param name="id">The id or bit.</param>
            <returns>A size of required <see cref="T:System.UInt32"/>s for the bitset.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Utils.BitSet" /> class.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.#ctor(System.UInt32[])">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Utils.BitSet" /> class.
            </summary>
        </member>
        <member name="P:Arch.Core.Utils.BitSet.Length">
            <summary>
                Returns the length of the bitset, how many ints it consists of.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.IsSet(System.Int32)">
            <summary>
                Checks whether a bit is set at the index.
            </summary>
            <param name="index">The index.</param>
            <returns>True if it is, otherwhise false</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.SetBit(System.Int32)">
            <summary>
                Sets a bit at the given index.
                Resizes its internal array if necessary.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.ClearBit(System.Int32)">
            <summary>
                Clears the bit at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.SetAll">
             <summary>
            
             </summary>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.ClearAll">
            <summary>
                Clears all set bits.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.All(Arch.Core.Utils.BitSet)">
            <summary>
                Checks if all bits from this instance match those of the other instance.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <returns>True if they match, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.Any(Arch.Core.Utils.BitSet)">
            <summary>
                Checks if any bits from this instance match those of the other instance.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <returns>True if they match, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.None(Arch.Core.Utils.BitSet)">
            <summary>
                Checks if none bits from this instance match those of the other instance.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <returns>True if none match, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.Exclusive(Arch.Core.Utils.BitSet)">
            <summary>
                Checks if exactly all bits from this instance match those of the other instance.
            </summary>
            <param name="other">The other <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <returns>True if they match, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.AsSpan">
            <summary>
                Creates a <see cref="T:System.Span`1"/> to access the <see cref="F:Arch.Core.Utils.BitSet._bits"/>.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.AsSpan(System.Span{System.UInt32},System.Boolean)">
            <summary>
                Copies the bits into a <see cref="T:System.Span`1"/> and returns a slice containing the copied <see cref="F:Arch.Core.Utils.BitSet._bits"/>.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.GetHashCode">
            <summary>
                Calculates the hash, this is unique for the set bits. Two <see cref="T:Arch.Core.Utils.BitSet"/> with the same set bits, result in the same hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.BitSet.ToString">
            <summary>
                Prints the content of this instance.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Arch.Core.Utils.SpanBitSet">
            <summary>
                The <see cref="T:Arch.Core.Utils.SpanBitSet"/> struct
                represents a non resizable collection of bits.
                Used to set, check and clear bits on a allocated <see cref="T:Arch.Core.Utils.BitSet"/> or on the stack.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.#ctor(System.Span{System.UInt32})">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Utils.BitSet" /> class.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.IsSet(System.Int32)">
            <summary>
                Checks whether a bit is set at the index.
            </summary>
            <param name="index">The index.</param>
            <returns>True if it is, otherwhise false</returns>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.SetBit(System.Int32)">
            <summary>
                Sets a bit at the given index.
                Resizes its internal array if necessary.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.ClearBit(System.Int32)">
            <summary>
                Clears the bit at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.SetAll">
             <summary>
            
             </summary>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.ClearAll">
            <summary>
                Clears all set bits.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.AsSpan">
            <summary>
                Creates a <see cref="T:System.Span`1"/> to access the <see cref="F:Arch.Core.Utils.SpanBitSet._bits"/>.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.AsSpan(System.Span{System.UInt32},System.Boolean)">
            <summary>
                Copies the bits into a <see cref="T:System.Span`1"/> and returns a slice containing the copied <see cref="F:Arch.Core.Utils.SpanBitSet._bits"/>.
            </summary>
            <param name=""></param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.GetHashCode">
            <summary>
                Calculates the hash, this is unique for the set bits. Two <see cref="T:Arch.Core.Utils.BitSet"/> with the same set bits, result in the same hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Arch.Core.Utils.SpanBitSet.ToString">
            <summary>
                Prints the content of this instance.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Arch.Core.Utils.ComponentType">
            <summary>
                The <see cref="T:Arch.Core.Utils.ComponentType"/> struct, represents a component with some information about it.
                A component labels an <see cref="T:Arch.Core.Entity"/> as possessing a particular aspect, and holds the data needed to model that aspect.
                For example, every game object that can take damage might have a Health component associated with its <see cref="T:Arch.Core.Entity"/>.
                Is created by compile time static or during runtime, look at the <see cref="T:Arch.Core.Utils.ComponentRegistry"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ComponentType.Id">
            <summary>
                Represents a unique Id for this component.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ComponentType.Type">
            <summary>
                Its type.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ComponentType.ByteSize">
            <summary>
                Its size in bytes.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ComponentType.ZeroSized">
            <summary>
                If its zero sized.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.ComponentType.#ctor(System.Int32,System.Type,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.Utils.ComponentType"/> struct.
            </summary>
            <param name="id">Its unique id.</param>
            <param name="type">Its type.</param>
            <param name="byteSize">Its size in bytes.</param>
            <param name="zeroSized">True if its zero sized ( empty struct).</param>
        </member>
        <member name="M:Arch.Core.Utils.ComponentType.op_Implicit(System.Type)~Arch.Core.Utils.ComponentType">
            <summary>
                Converts a <see cref="F:Arch.Core.Utils.ComponentType.Type"/> to its <see cref="T:Arch.Core.Utils.ComponentType"/>.
            </summary>
            <param name="value">The type that is being converted.</param>
        </member>
        <member name="M:Arch.Core.Utils.ComponentType.op_Implicit(Arch.Core.Utils.ComponentType)~System.Type">
            <summary>
                Converts the <see cref="T:Arch.Core.Utils.ComponentType"/> to its original <see cref="F:Arch.Core.Utils.ComponentType.Type"/>.
            </summary>
            <param name="value">The type that is being converted.</param>
        </member>
        <member name="T:Arch.Core.Utils.ComponentRegistry">
            <summary>
                The <see cref="T:Arch.Core.Utils.ComponentRegistry"/> class, tracks all used components in the project.
                Those are represented by <see cref="T:Arch.Core.Utils.ComponentType"/>'s.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.ComponentRegistry._types">
            <summary>
                All registered components, maps their <see cref="T:System.Type"/> to their <see cref="T:Arch.Core.Utils.ComponentType"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Utils.ComponentRegistry.Types">
            <summary>
                All registered components mapped to their <see cref="T:System.Type"/> as a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="P:Arch.Core.Utils.ComponentRegistry.TypesArray">
            <summary>
                TODO: Store array somewhere and update it to reduce allocations.
                All registered components as an <see cref="T:Arch.Core.Utils.ComponentType"/> array.
            </summary>
        </member>
        <member name="P:Arch.Core.Utils.ComponentRegistry.Size">
            <summary>
                Gets or sets the total number of registered components in the project.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Add(System.Type,System.Int32)">
            <summary>
                Adds a new <see cref="T:Arch.Core.Utils.ComponentType"/> manually and registers it.
                <remarks>You should only be using this when you exactly know what you are doing.</remarks>
            </summary>
            <param name="type">Its <see cref="T:System.Type"/>.</param>
            <param name="typeSize">The size in bytes of <see cref="!:type"/>.</param>
            <returns>Its <see cref="T:Arch.Core.Utils.ComponentType"/>.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Add(Arch.Core.Utils.ComponentType)">
            <summary>
                Adds a new <see cref="T:Arch.Core.Utils.ComponentType"/> manually and registers it.
                <remarks>You should only be using this when you exactly know what you are doing.</remarks>
            </summary>
            <param name="type">Its <see cref="T:System.Type"/>.</param>
            <returns>Its <see cref="T:Arch.Core.Utils.ComponentType"/>.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Add``1">
            <summary>
                Adds a new component and registers it.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <returns>Its <see cref="T:Arch.Core.Utils.ComponentType"/>.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Add(System.Type)">
            <summary>
                Adds a new component and registers it.
            </summary>
            <param name="type">Its <see cref="T:System.Type"/>.</param>
            <returns>Its <see cref="T:Arch.Core.Utils.ComponentType"/>.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Has``1">
            <summary>
                Checks if a component is registered.
            </summary>
            <typeparam name="T">Its generic type.</typeparam>
            <returns>True if it is, otherwise false.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Has(System.Type)">
            <summary>
                 Checks if a component is registered.
            </summary>
            <param name="type">Its <see cref="T:System.Type"/>.</param>
            <returns>True if it is, otherwise false.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Remove``1">
            <summary>
                Removes a registered component by its <see cref="T:System.Type"/> from the <see cref="T:Arch.Core.Utils.ComponentRegistry"/>.
            </summary>
            <typeparam name="T">The component to remove.</typeparam>
            <returns>True if it was successful, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Remove(System.Type)">
            <summary>
                Removes a registered component by its <see cref="T:System.Type"/> from the <see cref="T:Arch.Core.Utils.ComponentRegistry"/>.
            </summary>
            <param name="type">The component <see cref="T:System.Type"/> to remove.</param>
            <returns>True if it was successful, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Remove(System.Type,Arch.Core.Utils.ComponentType@)">
            <summary>
                Removes a registered component by its <see cref="T:System.Type"/> from the <see cref="T:Arch.Core.Utils.ComponentRegistry"/>.
            </summary>
            <param name="type">The component <see cref="T:System.Type"/> to remove.</param>
            <param name="compType">The removed <see cref="T:Arch.Core.Utils.ComponentType"/>, if it existed.</param>
            <returns>True if it was successful, false if not.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Replace(System.Type,System.Type,System.Int32)">
            <summary>
                Replaces a registered component by its <see cref="T:System.Type"/> with another one.
                The new <see cref="T:System.Type"/> will receive the id from the old one.
                <remarks>Use with caution, might cause undefined behaviour if you do not know what exactly you are doing.</remarks>
            </summary>
            <param name="oldType">The old component <see cref="T:System.Type"/> to be replaced.</param>
            <param name="newType">The new component <see cref="T:System.Type"/> that replaced the old one.</param>
            <param name="newTypeSize">The size in bytes of <see cref="!:newType"/>.</param>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Replace``2">
            <summary>
                Replaces a registered component by its <see cref="T:System.Type"/> with another one.
                The new <see cref="T:System.Type"/> will receive the id from the old one.
                <remarks>Use with caution, might cause undefined behaviour if you do not know what exactly you are doing.</remarks>
            </summary>
            <typeparam name="T0">The old component to be replaced.</typeparam>
            <typeparam name="T1">The new component that replaced the old one.</typeparam>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.Replace(System.Type,System.Type)">
            <summary>
                Replaces a registered component by its <see cref="T:System.Type"/> with another one.
                The new <see cref="T:System.Type"/> will receive the id from the old one.
                <remarks>Use with caution, might cause undefined behaviour if you do not know what exactly you are doing.</remarks>
            </summary>
            <param name="oldType">The old component <see cref="T:System.Type"/> to be replaced.</param>
            <param name="newType">The new component <see cref="T:System.Type"/> that replaced the old one.</param>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.TryGet``1(Arch.Core.Utils.ComponentType@)">
            <summary>
                Trys to get a component if it is registered.
            </summary>
            <typeparam name="T">Its generic type.</typeparam>
            <param name="componentType">Its <see cref="T:Arch.Core.Utils.ComponentType"/>, if it is registered.</param>
            <returns>True if it registered, otherwise false.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.TryGet(System.Type,Arch.Core.Utils.ComponentType@)">
            <summary>
                Trys to get a component if it is registered.
            </summary>
            <param name="type">Its <see cref="T:System.Type"/>.</param>
            <param name="componentType">Its <see cref="T:Arch.Core.Utils.ComponentType"/>, if it is registered.</param>
            <returns>True if it registered, otherwise false.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.SizeOf``1">
            <summary>
                Returns the size in bytes of the passed generic.
            </summary>
            <typeparam name="T">The generic.</typeparam>
            <returns>Its size.</returns>
        </member>
        <member name="M:Arch.Core.Utils.ComponentRegistry.SizeOf(System.Type)">
            TODO: Check if this still AOT compatible?
            <summary>
                Returns the size in bytes of the passed type.
            </summary>
            <param name="type">The type.</param>
            <returns>Its size in bytes.</returns>
        </member>
        <member name="T:Arch.Core.Utils.Component`1">
            <summary>
                The <see cref="T:Arch.Core.Utils.Component`1"/> class, provides compile time static information about a component.
            </summary>
            <typeparam name="T">Its generic type.</typeparam>
            <remarks>
                A <see cref="T:Arch.Core.Utils.Component`1"/> is created once during its first use.
                Subsequent uses access statically stored information.
            </remarks>
        </member>
        <member name="M:Arch.Core.Utils.Component`1.#cctor">
            <summary>
                Creates the compile time static class for acessing its information.
                Registers the component.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.Component`1.ComponentType">
            <summary>
                A static reference to information about the compile time static registered class.
            </summary>
        </member>
        <member name="T:Arch.Core.Utils.Component">
            <summary>
                The <see cref="T:Arch.Core.Utils.Component"/> class provides information about a component during runtime.
            </summary>
            <remarks>
                A <see cref="T:Arch.Core.Utils.Component"/> is created once during its first use.
                Subsequent uses access statically stored information.
            </remarks>
        </member>
        <member name="M:Arch.Core.Utils.Component.GetComponentType(System.Type)">
            <summary>
                Searches a <see cref="T:Arch.Core.Utils.ComponentType"/> by its <see cref="T:System.Type"/>. If it does not exist, it will be added.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Arch.Core.Utils.ComponentType"/>.</returns>
        </member>
        <member name="M:Arch.Core.Utils.Component.GetHashCode(System.Span{Arch.Core.Utils.ComponentType})">
            TODO : Find a nicer way? Probably cache hash somewhere in Query or Description instead to avoid calculating it every call?
            <summary>
                Calculates the hash code of a <see cref="T:Arch.Core.Utils.ComponentType"/> array, which is unique for the elements contained in the array.
                The order of the elements does not change the hashcode, so it depends on the elements themselves.
            </summary>
            <param name="obj">The <see cref="T:Arch.Core.Utils.ComponentType"/> array.</param>
            <returns>A unique hashcode for the contained elements, regardless of their order.</returns>
        </member>
        <member name="M:Arch.Core.Utils.Component.GetHashCode(System.Span{System.UInt32})">
            <summary>
                Calculates the hash code of a bitset span, which is unique for the elements contained in the array.
                The order of the elements does not change the hashcode, so it depends on the elements themselves.
            </summary>
            <param name="obj">The <see cref="T:Arch.Core.Utils.BitSet"/>.</param>
            <returns>A unique hashcode for the contained elements, regardless of their order.</returns>
        </member>
        <member name="T:Arch.Core.Utils.JobMeta">
            <summary>
                The <see cref="T:Arch.Core.Utils.JobMeta"/> class counts Id's for internally registered jobs during compile time.
            </summary>
        </member>
        <member name="T:Arch.Core.Utils.JobMeta`1">
            <summary>
                The <see cref="T:Arch.Core.Utils.JobMeta`1"/> class registers each job during compiletime to ensure static access to some information, which is more efficient.
            </summary>
            <typeparam name="T">The job struct generic type..</typeparam>
            /// <remarks>
                A <see cref="T:Arch.Core.Utils.JobMeta`1"/> is created once during its first use.
                Subsequent uses access statically stored information.
            </remarks>
        </member>
        <member name="M:Arch.Core.Utils.JobMeta`1.#cctor">
            <summary>
                Creates a compiletime static instance of this job.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.JobMeta`1.Id">
            <summary>
                The unique Id of the job.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.JobMeta`1.Policy">
            <summary>
                The pool policy of the registered job.
                Used for <see cref="F:Arch.Core.Utils.JobMeta`1.Pool"/>.
            </summary>
        </member>
        <member name="F:Arch.Core.Utils.JobMeta`1.Pool">
            <summary>
                The pool of the job.
                So that during multithreading new jobs are not permanently associated, which is better for efficiency.
            </summary>
        </member>
        <member name="T:Arch.Core.Utils.Group">
            <summary>
                The <see cref="T:Arch.Core.Utils.Group"/> class counts the Ids of registered groups in an compiletime static way.
            </summary>
        </member>
        <member name="T:Arch.Core.Utils.MurmurHash3">
            <summary>
                The <see cref="T:Arch.Core.Utils.MurmurHash3"/> class
                represents a utility to calculate a MurMurHash3 used to map querys and descriptions to archetypes.
            </summary>
        </member>
        <member name="M:Arch.Core.Utils.MurmurHash3.Hash32(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
                Calculates the hash as a 32 bit integer and returns it.
            </summary>
            <param name="bytes">The <see cref="T:System.Span`1"/> of bytes to hash.</param>
            <param name="seed">The seed.</param>
            <returns>The 32 bit integer hash.</returns>
        </member>
        <member name="T:Arch.Core.RecycledEntity">
            <summary>
                The <see cref="T:Arch.Core.RecycledEntity"/> struct
                stores information about an recycled <see cref="T:Arch.Core.Entity"/>, its id and its version.
            </summary>
        </member>
        <member name="F:Arch.Core.RecycledEntity.Id">
            <summary>
                The recycled id.
            </summary>
        </member>
        <member name="F:Arch.Core.RecycledEntity.Version">
            <summary>
                Its new version.
            </summary>
        </member>
        <member name="M:Arch.Core.RecycledEntity.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Arch.Core.RecycledEntity"/> struct.
            </summary>
            <param name="id">Its id..</param>
            <param name="version">Its version.</param>
        </member>
        <member name="T:Arch.Core.IForEach">
            <summary>
                The <see cref="T:Arch.Core.IForEach"/> interface
                provides a method to execute logic on an <see cref="T:Arch.Core.Entity"/>.
                Commonly used for queries to provide an clean interface.
            </summary>
        </member>
        <member name="M:Arch.Core.IForEach.Update(Arch.Core.Entity@)">
            <summary>
                Called on an <see cref="T:Arch.Core.Entity"/> to execute logic on it.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="T:Arch.Core.ForEach">
            <summary>
                The <see cref="T:Arch.Core.ForEach"/> delegate
                provides a callback to execute logic on an <see cref="T:Arch.Core.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Arch.Core.Entity"/>.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
                Forwards the SkipLocalInit to .NetStandard2.1.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
                Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
                There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
                <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
                <br/>
                For example:
                <list type="number">
                    <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                    <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                    <item><see langword="out"/> parameters.</item>
                </list>
                This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute"/> class.
            </summary>
        </member>
    </members>
</doc>
