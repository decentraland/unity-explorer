<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arch.SystemGroups</name>
    </assembly>
    <members>
        <member name="T:Arch.SystemGroups.ArchSystemsSorter">
            <summary>
                Sorts systems. Used by auto-generated code. Consider ignoring it
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsSorter.AddEdge(System.Type,System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.Type}})">
            <summary>
                Adds a dependency edge to the graph.
                Supports redundancies.
                Circular dependencies will be resolved on the final stage of the graph traversal
            </summary>
            <param name="from">System that should be updated before
                <paramref name="to"/>
            </param>
            <param name="to">System that should be updated after</param>
            <param name="edges">Storage of edges</param>
        </member>
        <member name="T:Arch.SystemGroups.ArchSystemsWorldBuilder`1">
            <summary>
                The builder of systems attached to the Unity Player Loop
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.#ctor(`0,Arch.SystemGroups.Throttling.IFixedUpdateBasedSystemGroupThrottler,Arch.SystemGroups.Throttling.IUpdateBasedSystemGroupThrottler,Arch.SystemGroups.ISystemGroupExceptionHandler)">
            <summary>
                Create a systems builder for the given world
            </summary>
            <param name="world">ECS World (Normally "Arch.Core.World")</param>
            <param name="fixedUpdateBasedSystemGroupThrottler">Throttler for all Fixed Update based Systems</param>
            <param name="updateBasedSystemGroupThrottler">Throttler for all Update based Systems</param>
            <param name="exceptionHandler">Exception handler</param>
        </member>
        <member name="P:Arch.SystemGroups.ArchSystemsWorldBuilder`1.World">
            <summary>
                Current World
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.TryCreateGroup``1(System.Type,System.Action{System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.Type}}},System.Boolean)">
            <summary>
                Creates Groups Automatically
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.TryRegisterGroup``1(System.Type,System.Action{System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.Type}}},System.Boolean)">
            <summary>
                Registers a group that is not created automatically
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.AddToGroup(Arch.System.ISystem{System.Single},System.Type,System.Type,System.Action{System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.Type}}},System.Boolean,System.Boolean)">
            <summary>
                Used by auto-generated code
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.Finish">
            <summary>
                Finalize the builder and create a systems world
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilder`1.Finish``1(Arch.SystemGroups.ISystemGroupAggregate{``0}.IFactory,``0)">
            <summary>
                Finalize the builder and create a systems world according to the custom aggregation mechanism
            </summary>
            <param name="aggregateFactory">factory for custom aggregation</param>
            <param name="aggregationData">data for custom aggregation</param>
            <typeparam name="TAggregationData">Type of aggregation data</typeparam>
            <exception cref="T:Arch.SystemGroups.GroupNotFoundException"></exception>
        </member>
        <member name="T:Arch.SystemGroups.ArchSystemsWorldBuilderExtensions">
            <summary>
                Publicly available extensions for the ArchSystemsWorldBuilder
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ArchSystemsWorldBuilderExtensions.InjectCustomGroup``2(Arch.SystemGroups.ArchSystemsWorldBuilder{``0}@,``1)">
            <summary>
                Inject a custom group into the world. It allows to create a group with custom parameters.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.InitializationSystemGroup">
            <summary>
                Updates at the end of the Initialization phase of the player loop
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.PhysicsSystemGroup">
            <summary>
                Updates at the beginning of the FixedUpdate phase of the player loop
                before all fixed updates
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.PostPhysicsSystemGroup">
            <summary>
                Updates at the end of the FixedUpdate phase of the player loop
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.PostRenderingSystemGroup">
            <summary>
                Updates at the end of the PostLateUpdate phase of the player loop.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.PresentationSystemGroup">
            <summary>
                Updates at the end of the PreLateUpdate phase of the player loop.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.SimulationSystemGroup">
            <summary>
                Updates at the end of the Update phase of the player loop
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.DefaultSystemGroups.SystemGroupsUtils">
            <summary>
                System Groups Utility Functions
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.DefaultSystemGroups.SystemGroupsUtils.Count">
            <summary>
                The number of defined system groups:
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.InitializationSystemGroup"/>
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.PhysicsSystemGroup"/>
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.PresentationSystemGroup"/>
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.SimulationSystemGroup"/>
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.PostPhysicsSystemGroup"/>
                <see cref="T:Arch.SystemGroups.DefaultSystemGroups.PostRenderingSystemGroup"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.CustomGroupBase`1">
            <summary>
                The base class that can be used to provide custom behaviour for a group
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.#ctor">
            <summary>
                Creates an empty group
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.#ctor(System.Collections.Generic.IEnumerable{Arch.System.ISystem{`0}},System.Boolean)">
            <summary>
                Creates a group from the collection from which a pooled instance of the list will be created
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.Dispose">
            <summary>
                Override to provide Dispose behaviour, you can use
                <see cref="M:Arch.SystemGroups.CustomGroupBase`1.DisposeInternal"/>
                as the default implementation
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.Initialize">
            <summary>
                Override to provide initialization behaviour, you can use
                <see cref="M:Arch.SystemGroups.CustomGroupBase`1.InitializeInternal"/>
                as the default
                implementation
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.BeforeUpdate(`0@,System.Boolean)">
            <summary>
                Override to provide BeforeUpdate, you can use
                <see cref="M:Arch.SystemGroups.CustomGroupBase`1.BeforeUpdateInternal(`0@,System.Boolean)"/>
                as the default implementation
            </summary>
            <param name="t"></param>
            <param name="throttle">Indicates that the current invocation is throttled</param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.Update(`0@,System.Boolean)">
            <summary>
                Override to provide Update behaviour, you can use
                <see cref="M:Arch.SystemGroups.CustomGroupBase`1.UpdateInternal(`0@,System.Boolean)"/>
                as the default implementation
            </summary>
            <param name="t"></param>
            <param name="throttle">Indicates that the current invocation is throttled</param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.AfterUpdate(`0@,System.Boolean)">
            <summary>
                Override to provide AfterUpdate behaviour, you can use
                <see cref="M:Arch.SystemGroups.CustomGroupBase`1.AfterUpdateInternal(`0@,System.Boolean)"/>
                as the default
                implementation
            </summary>
            <param name="throttle">Indicates that the current invocation is throttled</param>
            <param name="t"></param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.AddRange(System.Collections.Generic.IEnumerable{Arch.SystemGroups.ExecutionNode{`0}})">
            <summary>
                Adds systems to the group
            </summary>
            <param name="systems"></param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.InitializeInternal">
            <summary>
                Initialize all systems in the group
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.DisposeInternal">
            <summary>
                Dispose all systems in the group
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.BeforeUpdateInternal(`0@,System.Boolean)">
            <summary>
                Update all systems
            </summary>
            <param name="t">Delta time</param>
            <param name="throttle">Current update is throttled</param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.UpdateInternal(`0@,System.Boolean)">
            <summary>
                Update all systems
            </summary>
            <param name="t">Delta time</param>
            <param name="throttle">Current update is throttled</param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.AfterUpdateInternal(`0@,System.Boolean)">
            <summary>
                Update all systems
            </summary>
            <param name="t">Delta time</param>
            <param name="throttle">Current update is throttled</param>
        </member>
        <member name="M:Arch.SystemGroups.CustomGroupBase`1.GetMetadataInternal">
            <summary>
                The metadata of the group in an abstract form
            </summary>
            <returns></returns>
        </member>
        <member name="T:Arch.SystemGroups.DefaultGroup`1">
            <summary>
                Similar to `Arch.System.Group` but with better API that allows pooling
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.#ctor">
            <summary>
                Creates an empty group, for auto-generated code only,
                Don't invoke it manually
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.Initialize">
            <summary>
                Initialize all systems in the group
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.Dispose">
            <summary>
                Dispose all systems in the group
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.BeforeUpdate(`0@,System.Boolean)">
            <summary>
                To comply with Arch.System.ISystem
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.Update(`0@,System.Boolean)">
            <summary>
                To comply with Arch.System.ISystem
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.DefaultGroup`1.AfterUpdate(`0@,System.Boolean)">
            <summary>
                To comply with Arch.System.ISystem
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.GroupNotFoundException">
            <summary>
                Indicates that the group was not injected into the builder
                but there are systems included in it.
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.GroupNotFoundException.Message">
            <summary>
                <inheritdoc cref="P:System.Exception.Message"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupExceptionHandler">
            <summary>
                Provides exceptions handling on the level of the
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupExceptionHandler.Action">
            <summary>
                Action to tell the System Group how to behave after the exception
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.ISystemGroupExceptionHandler.Action.Continue">
            <summary>
                Continue execution of the system
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.ISystemGroupExceptionHandler.Action.Suspend">
            <summary>
                Put the system group into the Error state and stops the execution
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.ISystemGroupExceptionHandler.Action.Dispose">
            <summary>
                Dispose the system group and stops the execution
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ISystemGroupExceptionHandler.Handle(System.Exception,System.Type)">
            <summary>
                Handles the exception thrown by the system group, at some point the execution of the system group
                should be suspended to prevent exceptions flood
            </summary>
            <param name="exception">Exception</param>
            <param name="systemGroupType">System Group Type</param>
            <returns>An action to tell the System Group how to behave after
                <paramref name="exception"/>
            </returns>
        </member>
        <member name="T:Arch.SystemGroups.Metadata.AttributesInfoBase">
            <summary>
                Generated attributes info, allows to avoid reflection if such access is needed
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.Metadata.AttributesInfoBase.UpdateInGroup">
            <summary>
                <see cref="T:Arch.SystemGroups.UpdateInGroupAttribute"/>
                reflection, will be null for system groups
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.Metadata.AttributesInfoBase.GroupMetadata">
            <summary>
                Metadata of the group this system belongs to, will be null for system groups
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.Metadata.AttributesInfoBase.GetAttribute``1">
            <summary>
                Get first attribute of type
                <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of attribute</typeparam>
            <returns>Null if such attribute is not defined for the class</returns>
        </member>
        <member name="M:Arch.SystemGroups.Metadata.AttributesInfoBase.GetAttributes``1">
            <summary>
                Get all attributes of type
                <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of attribute</typeparam>
            <returns>An empty list if no attributes are found</returns>
        </member>
        <member name="T:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo">
            <summary>
                Dummy attributes info for system groups
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo.Instance">
            <summary>
                Instance shared between all System Groups as they provide no attributes data
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo.UpdateInGroup">
            <summary>
                Returns null
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo.GroupMetadata">
            <summary>
                Returns null
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo.GetAttribute``1">
            <summary>
                Returns null
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Arch.SystemGroups.Metadata.SystemGroupAttributesInfo.GetAttributes``1">
            <summary>
                Returns an empty array
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupAggregate">
            <summary>
                Non-generic interface for
                <see cref="T:Arch.SystemGroups.ISystemGroupAggregate`1"/>
            </summary>
        </member>
        <member name="P:Arch.SystemGroups.ISystemGroupAggregate.Count">
            <summary>
                Count of system groups
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ISystemGroupAggregate.TriggerUpdate">
            <summary>
                This function is called from Unity Player Loop
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ISystemGroupAggregate.Remove(Arch.SystemGroups.SystemGroup)">
            <summary>
                Remove a system group from the aggregate
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupAggregate`1">
            <summary>
                Defines a way of aggregating system groups of the same type
                <typeparam name="T">Additional Data set per world basis</typeparam>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ISystemGroupAggregate`1.Add(`0@,Arch.SystemGroups.SystemGroup)">
            <summary>
                Add a system group to the aggregate
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupAggregate`1.IFactory">
            <summary>
                Factory for SystemGroupAggregate
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.ISystemGroupAggregate`1.IFactory.Create(System.Type)">
            <summary>
                Creates a new instance of SystemGroupAggregate.
                Called once per type of SystemGroup
            </summary>
            <returns></returns>
        </member>
        <member name="T:Arch.SystemGroups.ISystemGroupAggregateFactory">
            <summary>
                Base interface for all system group aggregates
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.OrderedSystemGroupAggregate`1">
            <summary>
                Executes system groups in a specific order
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.OrderedSystemGroupAggregate`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean,System.Int32)">
            <summary>
                Creates a new instance of OrderedSystemGroupAggregate with the specified comparer
            </summary>
            <param name="comparer">Comparer should never return 0 for different system groups as it is forbidden by<see
                    cref="T:System.Collections.Generic.SortedList`2"/>.
                Specify "debounceEqualValues" to force it
            </param>
            <param name="debounceEqualValues">If True overrides the behaviour of comparer in a way that it never returns
                0
            </param>
            <param name="initialCapacity">Initial capacity of the underlying collection</param>
        </member>
        <member name="P:Arch.SystemGroups.OrderedSystemGroupAggregate`1.Count">
            <summary>
                <inheritdoc cref="P:Arch.SystemGroups.ISystemGroupAggregate.Count"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.OrderedSystemGroupAggregate`1.TriggerUpdate">
            <summary>
                <inheritdoc cref="M:Arch.SystemGroups.ISystemGroupAggregate.TriggerUpdate"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.OrderedSystemGroupAggregate`1.Add(`0@,Arch.SystemGroups.SystemGroup)">
            <summary>
                <inheritdoc cref="M:Arch.SystemGroups.ISystemGroupAggregate`1.Add(`0@,Arch.SystemGroups.SystemGroup)"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.OrderedSystemGroupAggregate`1.Remove(Arch.SystemGroups.SystemGroup)">
            <summary>
                <inheritdoc cref="M:Arch.SystemGroups.ISystemGroupAggregate.Remove(Arch.SystemGroups.SystemGroup)"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.SystemGroupAggregate">
            <summary>
                Contains the list of system groups of the same type
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroupAggregate.GroupType">
            <summary>
                For debugging purpose only
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.SystemGroupAggregateCache">
            <summary>
                Caches the system group aggregates by type of system group, produced for each
                <see cref="T:Arch.SystemGroups.ISystemGroupAggregateFactory"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.IPlayerLoop">
            <summary>
                Abstraction needed for Mocking or providing a custom implementation of injection into the Player Loop
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.IPlayerLoop.OnWorldStartAppending">
            <summary>
                Called before all other methods once for each world
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.IPlayerLoop.OnWorldEndAppending">
            <summary>
                Called after all
                <see cref="M:Arch.SystemGroups.IPlayerLoop.AddAggregate``1(System.Type,Arch.SystemGroups.ISystemGroupAggregate{``0})"/>
                and
                <see cref="M:Arch.SystemGroups.IPlayerLoop.RemoveAggregate(Arch.SystemGroups.ISystemGroupAggregate)"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.IPlayerLoop.AddAggregate``1(System.Type,Arch.SystemGroups.ISystemGroupAggregate{``0})">
            <summary>
                Adds an aggregate of system groups to the player loop. It is called only once upon the first mentioning
                of<paramref name="systemGroupType"/>.
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.IPlayerLoop.RemoveAggregate(Arch.SystemGroups.ISystemGroupAggregate)">
            <summary>
                Removes Removes the given system group from the Unity Player Loop.
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="T:Arch.SystemGroups.PlayerLoopAddMode">
            <summary>
                Determines whether the system should be added to the beginning or the end of the step of the player loop
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.PlayerLoopAddMode.Prepend">
            <summary>
                Add the system to the beginning of the step
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.PlayerLoopAddMode.Append">
            <summary>
                Add the system to the end of the step
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.PlayerLoopHelper">
            <summary>
                Provides utilities to inject systems into the Unity Player Loop
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopHelper.GetAggregates``2(Arch.SystemGroups.ISystemGroupAggregateFactory,System.Collections.Generic.List{``0})">
            <summary>
                Retrieve all aggregates created from the given factory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopHelper.AppendWorldToCurrentPlayerLoop``1(Arch.SystemGroups.IPlayerLoop,Arch.SystemGroups.ISystemGroupAggregate{``0}.IFactory,``0,Arch.SystemGroups.DefaultSystemGroups.InitializationSystemGroup,Arch.SystemGroups.DefaultSystemGroups.SimulationSystemGroup,Arch.SystemGroups.DefaultSystemGroups.PresentationSystemGroup,Arch.SystemGroups.DefaultSystemGroups.PostRenderingSystemGroup,Arch.SystemGroups.DefaultSystemGroups.PhysicsSystemGroup,Arch.SystemGroups.DefaultSystemGroups.PostPhysicsSystemGroup)">
            <summary>
                Append ECS world to the provided player loop, supports custom system group aggregates
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopHelper.AddSystemToPlayerLoop``1(Arch.SystemGroups.IPlayerLoop,``0@,Arch.SystemGroups.SystemGroup,Arch.SystemGroups.ISystemGroupAggregate{``0}.IFactory)">
            <summary>
                Add an ECS system to a specific point in the Unity player loop, so that it is updated every frame.
                <para>The system groups are being inserted into their corresponding aggregate that is unique for each
                    group type,
                    the execution order of the system groups inside the aggregate is not guaranteed and must be expected
                    to be used for independent worlds
                </para>
            </summary>
            <remarks>
                This function does not change the currently active player loop. If this behavior is desired, it's
                necessary
                to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed.
            </remarks>
            <param name="data">Additional data per world</param>
            <param name="systemGroup">The ECS system to add to the player loop.</param>
            <param name="playerLoop">Existing player loop to modify (e.g. PlayerLoop.GetCurrentPlayerLoop())</param>
            <param name="systemGroupAggregateFactory">Factory of System Group Aggregates</param>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopHelper.RemoveFromPlayerLoop(Arch.SystemGroups.IPlayerLoop,Arch.SystemGroups.ISystemGroupAggregateFactory,Arch.SystemGroups.SystemGroup)">
            <summary>
                Remove the system group from the player loop
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UnityPlayerLoop">
            <summary>
                Single-threaded wrapper over Unity's PlayerLoop
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.UnityPlayerLoop.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.UnityPlayerLoop.OnWorldStartAppending">
            <summary>
                <inheritdoc cref="M:Arch.SystemGroups.IPlayerLoop.OnWorldStartAppending"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.UnityPlayerLoop.OnWorldEndAppending">
            <summary>
                <inheritdoc cref="M:Arch.SystemGroups.IPlayerLoop.OnWorldEndAppending"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.UnityPlayerLoop.AddAggregate``1(System.Type,Arch.SystemGroups.ISystemGroupAggregate{``0})">
            <summary>
                <inheritdoc
                        cref="M:Arch.SystemGroups.IPlayerLoop.AddAggregate``1(System.Type,Arch.SystemGroups.ISystemGroupAggregate{``0})"/>
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.UnityPlayerLoop.RemoveAggregate(Arch.SystemGroups.ISystemGroupAggregate)">
            <summary>
                <inheritdoc
                        cref="M:Arch.SystemGroups.IPlayerLoop.RemoveAggregate(Arch.SystemGroups.ISystemGroupAggregate)"/>
            </summary>
            <param name="aggregate"></param>
        </member>
        <member name="T:Arch.SystemGroups.PlayerLoopSystem`1">
            <summary>
                The base system for all systems that are executed in the player loop
            </summary>
            <typeparam name="TWorld"></typeparam>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopSystem`1.#ctor(`0)">
            <summary>
                Default constructor for a player loop system
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Arch.SystemGroups.PlayerLoopSystem`1.GetMetadataInternal">
            <summary>
                The metadata of the system in an abstract form
            </summary>
            <returns></returns>
        </member>
        <member name="T:Arch.SystemGroups.SystemGroup">
            <summary>
                Denotes a root group connected to a specific phase of the player loop.
                By default updated by the scaled deltaTime.
                If Unscaled delta time is needed consider using Time.unscaledXXX manually.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.SystemGroup.State">
            <summary>
                State of the system group
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroup.State.NotInitialized">
            <summary>
                Initialized was not called yet
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroup.State.Active">
            <summary>
                Up and Running
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroup.State.Suspended">
            <summary>
                The execution of update functions is suspended but the group is not disposed
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroup.State.Disposed">
            <summary>
                Disposed was executed
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.SystemGroup.Metadata">
            <summary>
                An empty shared instance of attributes metadata
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.SystemGroup.Dispose">
            <summary>
                Dispose all systems and release the list allocated for them.
                After the dispose is called the instance of the group is no longer usable.
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.SystemGroup.Update">
            <summary>
                Update all nodes in the group
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.SystemGroupWorld">
            <summary>
                An entry point to the systems connected to the Unity Player Loop.
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.SystemGroupWorld.Initialize">
            <summary>
                Recursively Initialize all systems in the world according to their execution order
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.SystemGroupWorld.Dispose">
            <summary>
                Recursively Dispose all systems in the world according to their execution order.
                Remove all systems from the player loop
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UpdateBeforeAttribute">
            <summary>
                Apply to a system to specify an update ordering constraint with another system in the same
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                or<see cref="T:Arch.SystemGroups.DefaultGroup`1"/>.
            </summary>
            <remarks>Updating before or after a system constrains the scheduler ordering of these systems within a
                ComponentSystemGroup.
                Both the before and after systems must be a members of the same ComponentSystemGroup.
            </remarks>
        </member>
        <member name="M:Arch.SystemGroups.UpdateBeforeAttribute.#ctor(System.Type)">
            <summary>
                Specify a system which the tagged system must update before.
            </summary>
            <param name="systemType">The target system which the tagged system must update before. This system must be
                a member of the same
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                or<see cref="T:Arch.SystemGroups.DefaultGroup`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Arch.SystemGroups.UpdateBeforeAttribute.SystemType">
            <summary>
                The type of the target system, which the tagged system must update before.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UpdateAfterAttribute">
            <summary>
                Apply to a system to specify an update ordering constraint with another system in the same
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                or<see cref="T:Arch.SystemGroups.DefaultGroup`1"/>.
            </summary>
            <remarks>Updating before or after a system constrains the scheduler ordering of these systems within a
                ComponentSystemGroup.
                Both the before and after systems must be a members of the same ComponentSystemGroup.
            </remarks>
        </member>
        <member name="M:Arch.SystemGroups.UpdateAfterAttribute.#ctor(System.Type)">
            <summary>
                Specify a system which the tagged system must update after.
            </summary>
            <param name="systemType">The target system which the tagged system must update after. This system must be
                a member of the same
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                or<see cref="T:Arch.SystemGroups.DefaultGroup`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Arch.SystemGroups.UpdateAfterAttribute.SystemType">
            <summary>
                The type of the target system, which the tagged system must update after.
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.Throttling.ISystemGroupThrottler">
            <summary>
                Provides a way to throttle systems in the root system group, reused for different system groups
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.Throttling.ISystemGroupThrottler.ShouldThrottle(System.Type,Arch.SystemGroups.UnityBridge.TimeProvider.Info@)">
            <summary>
                Called when the system group begins to update within the Unity Player Loop
            </summary>
            <param name="systemGroupType">Type of the system group</param>
            <param name="timeInfo">Information about time</param>
        </member>
        <member name="M:Arch.SystemGroups.Throttling.ISystemGroupThrottler.OnSystemGroupUpdateFinished(System.Type,System.Boolean)">
            <summary>
                Called when the whole system group finishes its update, irrespective of whether it was throttled or not
            </summary>
            <param name="systemGroupType">Type of the system group</param>
            <param name="wasThrottled">The execution was throttled</param>
        </member>
        <member name="T:Arch.SystemGroups.Throttling.IUpdateBasedSystemGroupThrottler">
            <summary>
                Throttler dedicated to the system groups based on non-fixed updates
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.Throttling.IFixedUpdateBasedSystemGroupThrottler">
            <summary>
                Throttler dedicated to the system groups based on fixed updates
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.Throttling.ThrottlingEnabledAttribute">
            <summary>
                Indicates that the system or the group can throttle
                <para>If the group is marked by this attribute all its direct and transitive children will inherit it
                </para>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UnityBridge.TimeProvider">
            <summary>
                Can't call Unity API without Unity running
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UnityBridge.TimeProvider.Info">
            <summary>
                Information about time, contains Fixed Time for Physics Systems Groups and Time for the rest
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.UnityBridge.TimeProvider.Info.DeltaTime">
            <summary>
                <see cref="P:UnityEngine.Time.deltaTime"/>
                or
                <see cref="P:UnityEngine.Time.fixedDeltaTime"/>
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.UnityBridge.TimeProvider.Info.CurrentUnscaledTime">
            <summary>
                <see cref="P:UnityEngine.Time.unscaledDeltaTime"/>
                or
                <see cref="P:UnityEngine.Time.fixedUnscaledDeltaTime"/>
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.UnityBridge.TimeProvider.Info.CurrentScaledTime">
            <summary>
                <see cref="P:UnityEngine.Time.time"/>
                or
                <see cref="P:UnityEngine.Time.fixedTime"/>
            </summary>
        </member>
        <member name="F:Arch.SystemGroups.UnityBridge.TimeProvider.Info.Realtime">
            <summary>
                <see cref="P:UnityEngine.Time.realtimeSinceStartup"/>
            </summary>
        </member>
        <member name="T:Arch.SystemGroups.UpdateInGroupAttribute">
            <summary>
                The specified Type must be a SystemGroup.
                Updating in a group means this system will be automatically updated by the specified
                ComponentSystemGroup when the group is updated.
                The system may order itself relative to other systems in the group with UpdateBefore and UpdateAfter.
                This ordering takes
                effect when the system group is sorted.
            </summary>
        </member>
        <member name="M:Arch.SystemGroups.UpdateInGroupAttribute.#ctor(System.Type)">
            <summary>
                Specify the
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                or
                <see cref="T:Arch.System.Group`1"/>
                which the tagged system should be added to. The tagged system
                will be updated as part of this system group's Update() method.
            </summary>
            <param name="groupType">The
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                type/
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown id the group type is empty.</exception>
        </member>
        <member name="P:Arch.SystemGroups.UpdateInGroupAttribute.GroupType">
            <summary>
                Retrieve the
                <see cref="T:Arch.SystemGroups.SystemGroup"/>
                type.
            </summary>
        </member>
    </members>
</doc>
        </doc>
